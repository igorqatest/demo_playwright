# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping only Primary
- Location: /Users/pejin/Documents/Playwright new/tests/ansel_shopping/ansel_spouse.spec.ts:4:5

# Error details

```
Error: locator.click: Test ended.
Call log:
  - waiting for getByText('Yes', { exact: true })

    at /Users/pejin/Documents/Playwright new/tests/ansel_shopping/ansel_spouse.spec.ts:84:52
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { te } from 'date-fns/locale';
   3 |
   4 | test('Shopping only Primary', async ({ page, context }) => {
   5 |   test.setTimeout(120_000);
   6 |   console.log('🚀 Starting test...');
   7 |
   8 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JkpXdYAJ/view');
   9 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   10 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   11 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   12 |   console.log('✅ Logged into Salesforce');
   13 |
   14 |   await page.getByRole('tab', { name: 'Related' }).click();
   15 |   console.log('📂 Opened Related tab');
   16 |
   17 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 60);
   18 |
   19 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   20 |   await page.waitForTimeout(2000);
   21 |   await csLink.click();
   22 |   console.log('🔗 Clicked CS- link');
   23 |
   24 |   await page.waitForTimeout(1000);
   25 |   await page.getByRole('tab', { name: 'Related' }).click();
   26 |   await page.waitForTimeout(1000);
   27 | // Wait until the link is visible and stable before clicking
   28 |  await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
   29 |
   30 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   31 |   await firstNameLink.click({ force: true });
   32 |   console.log('✅ Opened first prospective record');
   33 |
   34 |   await page.waitForTimeout(1000);
   35 |   await page.getByRole('tab', { name: 'Details' }).click();
   36 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
   37 |
   38 |   // Extract SSN
   39 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
   40 |   const ssn = await ssnElement.innerText();
   41 |   console.log(`🔐 Extracted SSN: ${ssn}`);
   42 |
   43 |   // Extract and format DOB
   44 |   const dobElement = page.locator('lightning-formatted-text')
   45 |     .locator('xpath=../../..')
   46 |     .filter({ hasText: 'Date of Birth' })
   47 |     .locator('lightning-formatted-text');
   48 |
   49 |   const dobRaw = await dobElement.innerText();
   50 |   let [month, day, year] = dobRaw.split('/');
   51 |   month = month.padStart(2, '0');
   52 |   day = day.padStart(2, '0');
   53 |   const dob = `${month}/${day}/${year}`;
   54 |   console.log(`🎂 Extracted and formatted DOB: ${dob}`);
   55 |
   56 |   // Click Get The Link
   57 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   58 |   console.log('🎯 Clicked "Get The Link"');
   59 |
   60 |   const validTextarea = page.locator('textarea').filter({ hasText: /^https:\/\/.+/ }).first();
   61 |   await expect(validTextarea).toBeVisible({ timeout: 10000 });
   62 |
   63 |   const shoppingLink = await validTextarea.inputValue();
   64 |   console.log(`🔗 Extracted shopping link`);
   65 |
   66 |   // Open in a new tab (ensures fresh state and skips remembering old flow)
   67 |   const newPage = await context.newPage();
   68 |   await newPage.goto(shoppingLink, { waitUntil: 'domcontentloaded' });
   69 |   console.log('🆕 Navigated to shopping link in new tab');
   70 |
   71 |   // Proceed with verify step
   72 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   73 |   console.log('🔐 Verification started');
   74 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
   75 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
   76 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   77 |   console.log('🔓 Verification passed');
   78 |
   79 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   80 |
   81 |   // ✅ Ensure fresh continuation from the correct start page
   82 |
   83 |    // Select "No" for married, and "I'm not a parent"
>  84 |    await newPage.getByText('Yes', { exact: true }).click();
      |                                                    ^ Error: locator.click: Test ended.
   85 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 60);
   86 |
   87 |   await newPage.getByText('I\'m not a parent').click();
   88 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   89 |   console.log('👪 Household questions');
   90 |
   91 |   // ⏭ Continue steps
   92 |   for (let i = 1; i <= 8; i++) {
   93 |     await newPage.getByRole('button', { name: 'Next step' }).click();
   94 |     console.log(`➡️ Page ${i + 2} complete`);
   95 |   }
   96 |    // Let's talk about medical expenses
   97 |   await newPage.getByText('Yes').click();
   98 |   await newPage.getByText('I typically pay the full cost').click();
   99 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  100 |   console.log('💰 Medical expenses questions');
  101 |
  102 |   // We'll keep your budget in mind
  103 |   await newPage.getByText('I can purchase what I want').click();
  104 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  105 |     console.log('✅ Purchasing what I want');
  106 |
  107 |
  108 | // Select Ansel benefits
  109 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  110 |
  111 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  112 |
  113 | await newPage.getByText('My spouse and me').click();
  114 |
  115 | console.log('✅ Select ansel benefits');
  116 |
  117 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  118 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  119 |
  120 |   
  121 |   for (let i = 0; i < 10; i++) {
  122 |     await page.mouse.wheel(0, 300);
  123 |     await page.waitForTimeout(100);
  124 |   }
  125 |   await newPage.waitForTimeout(5000);
  126 |   await newPage.getByRole('listbox').filter({ hasText: 'FemaleMale' }).click();
  127 |
  128 |   
  129 | // Generate a random 10-digit phone number
  130 | const randomPhone = `9${Math.floor(100000000 + Math.random() * 900000000)}`;
  131 |
  132 | await newPage.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill(randomPhone);
  133 | console.log(`📱 Filled random phone number: ${randomPhone}`);  
  134 |
  135 | await newPage.getByRole('listbox').filter({ hasText: 'MobileStandard' }).click();
  136 |   await newPage.locator('input[name="SET_STREET_ADDRESS"]').fill('123 Main St');
  137 |   await newPage.locator('input[name="SET_ZIP_CODE"]').fill('12345');
  138 |   await newPage.locator('input[name="SET_CITY"]').fill('Random City');
  139 |
  140 |
  141 | // Add spouse
  142 | await newPage.getByRole('button', { name: '+ Add dependent' }).click();
  143 | await newPage.getByRole('listbox').filter({ hasText: 'SpouseChildDomestic' }).click();
  144 | // Then select the 'Spouse' option
  145 | await newPage.getByRole('option', { name: 'Spouse' }).click();
  146 | await newPage.locator('input[name="firstName"]').fill('Jane');
  147 | await newPage.locator('input[name="lastName"]').fill('Doe');
  148 | // Open the gender dropdown
  149 | await newPage.waitForTimeout(1000);
  150 | await newPage.waitForTimeout(1000);
  151 | await newPage.getByRole('listbox').filter({ hasText: /^FemaleMale$/ }).click();
  152 |
  153 | // Wait for the options to become visible
  154 | await newPage.waitForSelector('[role="option"]'); // This ensures options are ready
  155 |
  156 | // Pick a random gender
  157 | const gender = Math.random() > 0.5 ? 'Male' : 'Female';
  158 |
  159 | // Select the gender option
  160 | await newPage.getByRole('option', { name: gender }).click();
  161 |
  162 | console.log(`✅ Selected gender: ${gender}`);
  163 | // Wait for the options to become visible
  164 | //await newPage.waitForSelector('[role="option"]'); // This ensures options are ready
  165 |
  166 | // Pick a random gender
  167 |
  168 |
  169 | // Select date of birth
  170 | await newPage.locator('input[name="birthdate"]').fill('01/01/2004');
  171 |
  172 | // SSN
  173 | // Helper to generate random SSN
  174 | function generateRandomSSN() {
  175 |   const part1 = Math.floor(100 + Math.random() * 900); // 3 digits
  176 |   const part2 = Math.floor(10 + Math.random() * 90);   // 2 digits
  177 |   const part3 = Math.floor(1000 + Math.random() * 9000); // 4 digits
  178 |   return `${part1}-${part2}-${part3}`;
  179 | }
  180 |
  181 | // Then fill it
  182 | const randomSSN = generateRandomSSN();
  183 |
  184 |
```