# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping flow with fresh start each time
- Location: /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:3:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeEnabled()

Locator: getByRole('link', { name: /^CS-/ })
Expected: enabled
Received: <element(s) not found>
Call log:
  - expect.toBeEnabled with timeout 5000ms
  - waiting for getByRole('link', { name: /^CS-/ })

    at /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:19:22
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Shopping flow with fresh start each time', async ({ page, context }) => {
   4 |   // 1. Login to Salesforce
   5 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   6 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   7 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   8 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   9 |   console.log('üß≠ Logged into Salesforce');
   10 |
   11 |   await page.getByRole('tab', { name: 'Related' }).click();
   12 |   console.log('üìÇ Opened Related tab');
   13 |
   14 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 30);
   15 |
   16 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   17 |
   18 | // Wait for visibility and stability
>  19 | await expect(csLink).toBeEnabled();
      |                      ^ Error: Timed out 5000ms waiting for expect(locator).toBeEnabled()
   20 | await csLink.scrollIntoViewIfNeeded();
   21 | await page.waitForTimeout(500); // Allow any animation to finish
   22 |
   23 | // Optional: check if page is loading (add logic if spinner is used in your app)
   24 | // await expect(page.locator('.your-loading-spinner')).toHaveCount(0);
   25 |
   26 | // Try clicking with a retry fallback
   27 | try {
   28 |   await csLink.click({ timeout: 5000 });
   29 |   console.log('üîó Clicked CS- link successfully!');
   30 | } catch (error) {
   31 |   console.warn('‚ö†Ô∏è CS- link not clickable on first try. Retrying with force...');
   32 |   await csLink.click({ force: true });
   33 |   console.log('‚úÖ Forced click on CS- link as fallback');
   34 | }
   35 |   await page.waitForTimeout(1000);
   36 |   await page.getByRole('tab', { name: 'Related' }).click();
   37 |
   38 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
   39 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
   40 |
   41 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   42 |   await firstNameLink.click({ force: true });
   43 |   console.log('‚úÖ Clicked first name in list');
   44 |
   45 |   await page.getByRole('tab', { name: 'Details' }).click();
   46 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
   47 |
   48 |   // Extract SSN
   49 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
   50 |   const ssn = await ssnElement.innerText();
   51 |   console.log(`üîê SSN: ${ssn}`);
   52 |
   53 |   // Extract and format DOB
   54 |   const dobElement = page.locator('lightning-formatted-text')
   55 |     .locator('xpath=../../..')
   56 |     .filter({ hasText: 'Date of Birth' })
   57 |     .locator('lightning-formatted-text');
   58 |
   59 |   const dobRaw = await dobElement.innerText();
   60 |   let [month, day, year] = dobRaw.split('/');
   61 |   month = month.padStart(2, '0');
   62 |   day = day.padStart(2, '0');
   63 |   const dob = `${month}/${day}/${year}`;
   64 |   console.log(`üéÇ DOB: ${dob}`);
   65 |
   66 |   // Get the shopping link
   67 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   68 |   console.log('üîó Clicked "Get The Link"');
   69 |
   70 |   const validTextarea = page.locator('textarea').filter({ hasText: /^https:\/\/.+/ }).first();  
   71 |   // üí¨ Grab all textareas and find the one with the valid link
   72 | // üîÅ Try to find valid link from textareas with retries
   73 | let link = '';
   74 | for (let i = 0; i < 10; i++) {
   75 |   const textareas = await page.locator('textarea').all();
   76 |   for (const ta of textareas) {
   77 |     const val = (await ta.inputValue()).trim();
   78 |     console.log(`üß™ Found textarea value: ${val}`);
   79 |     if (val.includes('https://qa-ansel-platform.joinansel.com/enrollment')) {
   80 |       link = val;
   81 |       break;
   82 |     }
   83 |   }
   84 |
   85 |   if (link) break;
   86 |   console.log('‚è≥ Link not found yet, waiting 1s before retry...');
   87 |   await page.waitForTimeout(1000);
   88 | }
   89 |
   90 | if (!link) {
   91 |   throw new Error('‚ùå No valid shopping link found in any <textarea>.');
   92 | }
   93 |
   94 | console.log(`‚úÖ Final extracted shopping link: ${link}`);
   95 |
   96 | // üåê Open it in a new tab
   97 | const newPage = await page.context().newPage();
   98 | await newPage.goto(link, { waitUntil: 'domcontentloaded' });
   99 | console.log('üöÄ Navigated to standalone enrollment page');
  100 |
  101 |   // 3. Verification
  102 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  103 |   console.log('üìÑ On Verification page');
  104 |
  105 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
  106 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
  107 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  108 |   console.log('‚úÖ Verification submitted');
  109 |
  110 |   // 4. Additional questions
  111 |   await newPage.getByRole('radio', { name: 'No' }).click();
  112 |   await newPage.getByText('I\'m not a parent').click();
  113 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  114 |   console.log('üë™ Household questions answered');
  115 |
  116 |   // 5. Progress through steps
  117 |   for (let i = 1; i <= 8; i++) {
  118 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  119 |     console.log(`‚û°Ô∏è Page ${i + 2} complete`);
```