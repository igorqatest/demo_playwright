# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping flow with fresh start each time
- Location: /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:155:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeEnabled()

Locator: getByRole('link', { name: /^CS-/ })
Expected: enabled
Received: <element(s) not found>
Call log:
  - expect.toBeEnabled with timeout 5000ms
  - waiting for getByRole('link', { name: /^CS-/ })

    at /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:171:24
```

# Test source

```ts
   71 |   const validTextarea = page.locator('textarea').filter({ hasText: /^https:\/\/.+/ }).first();  
   72 |   // üí¨ Grab all textareas and find the one with the valid link
   73 | // üîÅ Try to find valid link from textareas with retries
   74 | let link = '';
   75 | for (let i = 0; i < 10; i++) {
   76 |   const textareas = await page.locator('textarea').all();
   77 |   for (const ta of textareas) {
   78 |     const val = (await ta.inputValue()).trim();
   79 |     console.log(`üß™ Found textarea value: ${val}`);
   80 |     if (val.includes('https://qa-ansel-platform.joinansel.com/enrollment')) {
   81 |       link = val;
   82 |       break;
   83 |     }
   84 |   }
   85 |
   86 |   if (link) break;
   87 |   console.log('‚è≥ Link not found yet, waiting 1s before retry...');
   88 |   await page.waitForTimeout(1000);
   89 | }
   90 |
   91 | if (!link) {
   92 |   throw new Error('‚ùå No valid shopping link found in any <textarea>.');
   93 | }
   94 |
   95 | console.log(`‚úÖ Final extracted shopping link: ${link}`);
   96 |
   97 | // üåê Open it in a new tab
   98 | const newPage = await page.context().newPage();
   99 | await newPage.goto(link, { waitUntil: 'domcontentloaded' });
  100 | console.log('üöÄ Navigated to standalone enrollment page');
  101 |
  102 |   // 3. Verification
  103 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  104 |   console.log('üìÑ On Verification page');
  105 |
  106 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
  107 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
  108 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  109 |   console.log('‚úÖ Verification submitted');
  110 |
  111 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  112 |
  113 |   // 4. Additional questions
  114 |   await newPage.getByRole('radio', { name: 'No' }).click();
  115 |   await newPage.getByText('I\'m not a parent').click();
  116 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  117 |   console.log('üë™ Household questions answered');
  118 |
  119 |   // 5. Progress through steps
  120 |   for (let i = 1; i <= 8; i++) {
  121 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  122 |     console.log(`‚û°Ô∏è Page ${i + 2} complete`);
  123 |   }
  124 |
  125 |   await newPage.getByRole('link', { name: 'Skip this' }).click();
  126 |   console.log('üïµÔ∏è‚Äç‚ôÇÔ∏è Skipped optional promo');
  127 |
  128 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  129 |   await newPage.waitForTimeout(1000);
  130 |   await newPage.getByRole('listbox').filter({ hasText: 'FemaleMale' }).click();
  131 |   await newPage.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill('1234567890');
  132 |   await newPage.getByRole('listbox').filter({ hasText: 'MobileStandard' }).click();
  133 |
  134 |   await newPage.locator('input[name="SET_STREET_ADDRESS"]').fill('123 Main St');
  135 |   await newPage.locator('input[name="SET_ZIP_CODE"]').fill('12345');
  136 |   await newPage.locator('input[name="SET_CITY"]').fill('Sample City');
  137 |
  138 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  139 |   console.log('üì¨ Contact info filled');
  140 |
  141 |   await newPage.locator('input[name="password"]').fill('Demo123456');
  142 |   await newPage.locator('input[name="confirmPassword"]').fill('Demo123456');
  143 |   await newPage.evaluate(() => {
  144 |     const checkbox = document.querySelector('input[name="agreeToTerms"]');
  145 |     if (checkbox) checkbox.removeAttribute('readonly');
  146 |     (checkbox as HTMLInputElement).click();
  147 |   });
  148 |
  149 |   console.log('üîê Final step reached and password set.');
  150 | }); */
  151 |
  152 |
  153 | import { test, expect } from '@playwright/test';
  154 |
  155 | test('Shopping flow with fresh start each time', async ({ page, context }) => {
  156 |   test.setTimeout(120_000);
  157 |
  158 |   // 1. Login to Salesforce
  159 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
  160 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
  161 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
  162 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
  163 |   console.log('üß≠ Logged into Salesforce');
  164 |
  165 |   await page.getByRole('tab', { name: 'Related' }).click();
  166 |   console.log('üìÇ Opened Related tab');
  167 |
  168 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 30);
  169 |
  170 |   const csLink = page.getByRole('link', { name: /^CS-/ });
> 171 |   await expect(csLink).toBeEnabled();
      |                        ^ Error: Timed out 5000ms waiting for expect(locator).toBeEnabled()
  172 |   await csLink.scrollIntoViewIfNeeded();
  173 |   await page.waitForTimeout(500);
  174 |
  175 |   try {
  176 |     await csLink.click({ timeout: 5000 });
  177 |     console.log('üîó Clicked CS- link successfully!');
  178 |   } catch {
  179 |     console.warn('‚ö†Ô∏è Retrying CS- link click with force...');
  180 |     await csLink.click({ force: true });
  181 |     console.log('‚úÖ Forced CS- link click');
  182 |   }
  183 |
  184 |   await page.waitForTimeout(1000);
  185 |   await page.getByRole('tab', { name: 'Related' }).click();
  186 |
  187 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
  188 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
  189 |
  190 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
  191 |   await firstNameLink.click({ force: true });
  192 |   console.log('‚úÖ Clicked first name in list');
  193 |
  194 |   await page.getByRole('tab', { name: 'Details' }).click();
  195 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
  196 |
  197 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
  198 |   const ssn = await ssnElement.innerText();
  199 |   console.log(`üîê SSN: ${ssn}`);
  200 |
  201 |   const dobElement = page.locator('lightning-formatted-text')
  202 |     .locator('xpath=../../..')
  203 |     .filter({ hasText: 'Date of Birth' })
  204 |     .locator('lightning-formatted-text');
  205 |
  206 |   const dobRaw = await dobElement.innerText();
  207 |   let [month, day, year] = dobRaw.split('/');
  208 |   month = month.padStart(2, '0');
  209 |   day = day.padStart(2, '0');
  210 |   const dob = `${month}/${day}/${year}`;
  211 |   console.log(`üéÇ DOB: ${dob}`);
  212 |
  213 |   await page.getByRole('button', { name: 'Get The Link' }).click();
  214 |   console.log('üîó Clicked "Get The Link"');
  215 |
  216 |   let link = '';
  217 |   for (let i = 0; i < 10; i++) {
  218 |     const textareas = await page.locator('textarea').all();
  219 |     for (const ta of textareas) {
  220 |       const val = (await ta.inputValue()).trim();
  221 |       console.log(`üß™ Found textarea value: ${val}`);
  222 |       if (val.includes('https://qa-ansel-platform.joinansel.com/enrollment')) {
  223 |         link = val;
  224 |         break;
  225 |       }
  226 |     }
  227 |     if (link) break;
  228 |     await page.waitForTimeout(1000);
  229 |   }
  230 |
  231 |   if (!link) throw new Error('‚ùå No valid shopping link found.');
  232 |   console.log(`‚úÖ Final extracted shopping link: ${link}`);
  233 |
  234 |   // 2. Open in new tab with a clean session
  235 |   const newPage = await context.newPage();
  236 |   await newPage.goto('about:blank');
  237 |   await newPage.context().clearCookies();
  238 |   await newPage.evaluate(() => {
  239 |     localStorage.clear();
  240 |     sessionStorage.clear();
  241 |   });
  242 |   console.log("üßº Cleared sessionStorage/localStorage");
  243 |
  244 |   await newPage.goto(link, { waitUntil: 'domcontentloaded' });
  245 |   console.log('üöÄ Navigated to standalone enrollment page');
  246 |
  247 |   // 3. Verification
  248 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  249 |   console.log('üìÑ On Verification page');
  250 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
  251 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
  252 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  253 |   console.log('‚úÖ Verification submitted');
  254 |
  255 |   // Continue your flow as needed...
  256 | });
  257 |
```