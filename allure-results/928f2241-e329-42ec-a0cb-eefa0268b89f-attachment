# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify field labels are visible on Contact creation form
- Location: /Users/pejin/Documents/Playwright QA/tests/test-35.spec.ts:24:5

# Error details

```
Error: locator.evaluate: Error: strict mode violation: locator('.scroller, .uiScroller') resolved to 4 elements:
    1) <div tabindex="-1" data-aura-class="uiScroller" data-aura-rendered-by="966:0" class="uiScroller scroller-wrapper scroll-bidirectional native">…</div> aka locator('.uiScroller').first()
    2) <div data-aura-rendered-by="967:0" class="scroller actionBarPlugin">…</div> aka locator('.scroller').first()
    3) <div tabindex="-1" data-aura-class="uiScroller" data-aura-rendered-by="2800:0" class="scroller uiScroller scroller-wrapper scroll-bidirectional native">…</div> aka locator('div:nth-child(3) > div:nth-child(2) > .safari-workaround > div')
    4) <div class="scroller" data-aura-rendered-by="2801:0">…</div> aka locator('.scroller > .scroller')

Call log:
  - waiting for locator('.scroller, .uiScroller')

    at /Users/pejin/Documents/Playwright QA/tests/test-35.spec.ts:119:16
```

# Test source

```ts
   19 | async function logAndScreenshot(page, dir: string, step: string, message: string) {
   20 |   console.log(message);
   21 |   await page.screenshot({ path: `${dir}/${step}.png` });
   22 | }
   23 |
   24 | test('Verify field labels are visible on Contact creation form', async ({ page }) => {
   25 |   const screenshotDir = 'test-35';
   26 |   if (fs.existsSync(screenshotDir)) {
   27 |     fs.readdirSync(screenshotDir).forEach(file => {
   28 |       fs.unlinkSync(path.join(screenshotDir, file));
   29 |     });
   30 |   } else {
   31 |     fs.mkdirSync(screenshotDir);
   32 |   }
   33 |
   34 |   console.log('🌐 Opening login page...');
   35 |   await page.goto('https://ansel2-dev-ed.develop.lightning.force.com/lightning/o/Contact/list?filterName=00BWU00000QUsgp2AD');
   36 |   await logAndScreenshot(page, screenshotDir, '1-login', '📸 Login page loaded');
   37 |
   38 |   console.log('🔐 Logging in...');
   39 |   await page.getByRole('textbox', { name: 'Username' }).fill('pejinigor@gmail.com');
   40 |   await page.getByRole('textbox', { name: 'Password' }).fill('Test123456');
   41 |   await logAndScreenshot(page, screenshotDir, '2-login-filled', '📸 Credentials entered');
   42 |   await page.getByRole('button', { name: 'Log In' }).click();
   43 |   await page.waitForTimeout(2000);
   44 |
   45 |   console.log('📇 Navigating to Contacts tab...');
   46 |   await page.getByRole('link', { name: 'Contacts' }).click();
   47 |   await page.waitForTimeout(2000);
   48 |   await logAndScreenshot(page, screenshotDir, '3-contacts', '📸 Contacts tab');
   49 |
   50 |   console.log('🆕 Opening New Contact form...');
   51 |   await page.getByRole('button', { name: 'New' }).click();
   52 |   await page.waitForTimeout(2000);
   53 |   await logAndScreenshot(page, screenshotDir, '4-contact-form', '📸 New Contact form opened');
   54 |
   55 |   const labelsToCheck = [
   56 |     'Contact Owner',
   57 |     'Salutation',
   58 |     'First Name',
   59 |     'Last Name',
   60 |     'Phone',
   61 |     'Home Phone',
   62 |     'Mobile',
   63 |     'Other Phone',
   64 |     'Title',
   65 |     'Department',
   66 |     'Email',
   67 |     'Fax',
   68 |     'Birthdate',
   69 |     'Reports To',
   70 |     'Lead Source',
   71 |     'Website URL',
   72 |     'URL Name',
   73 |     'Assistant',
   74 |     'Asst. Phone'
   75 |   ];
   76 |   
   77 |   
   78 |   console.log('🔍 Verifying field labels...');
   79 |
   80 | for (const label of labelsToCheck) {
   81 |   const normalized = label.replace(/\s+/g, '_');
   82 |   try {
   83 |     const possibleLocators = [
   84 |       page.locator('.test-id__field-label').filter({ hasText: label }),
   85 |       page.locator('label').filter({ hasText: label }),
   86 |       page.getByLabel(label),
   87 |       page.getByPlaceholder(label)
   88 |     ];
   89 |
   90 |     let found = false;
   91 |
   92 |     for (const locator of possibleLocators) {
   93 |       const count = await locator.count();
   94 |       if (count > 0) {
   95 |         const el = locator.first();
   96 |         await el.scrollIntoViewIfNeeded(); // 👈 Scroll to make it visible
   97 |         await expect(el).toBeVisible();
   98 |         console.log(`✅ Label visible: ${label}`);
   99 |         found = true;
  100 |         break;
  101 |       }
  102 |     }
  103 |
  104 |     if (!found) {
  105 |       console.log(`❌ Label not found: ${label}`);
  106 |       await page.screenshot({ path: `${screenshotDir}/missing-${normalized}.png` });
  107 |     }
  108 |
  109 |   } catch (err) {
  110 |     console.log(`❌ Error while checking "${label}": ${err.message}`);
  111 |     await page.screenshot({ path: `${screenshotDir}/error-${normalized}.png` });
  112 |   }
  113 | }
  114 |
  115 | console.log('✅ All label checks completed.');
  116 |
  117 | // Scroll deeper using the form's scrollable container
  118 | const scroller = page.locator('.scroller, .uiScroller');
> 119 | await scroller.evaluate(el => el.scrollTop = el.scrollHeight); // scroll to bottom
      |                ^ Error: locator.evaluate: Error: strict mode violation: locator('.scroller, .uiScroller') resolved to 4 elements:
  120 | await page.waitForTimeout(1000); // wait for content to settle
  121 | await page.screenshot({ path: `${screenshotDir}/z-final-full-scroll.png` });
  122 |
  123 | });
  124 |
```