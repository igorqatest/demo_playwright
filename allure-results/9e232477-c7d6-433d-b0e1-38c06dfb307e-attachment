# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: My first test
- Location: /Users/pejin/Documents/Playwright new/tests/claim_symetra.spec.ts:4:5

# Error details

```
Error: expect.toBeVisible: Error: strict mode violation: locator('div[role="listbox"]') resolved to 3 elements:
    1) <div tabindex="0" role="listbox" aria-expanded="false" class="ui item dropdown menuUserDropdown">…</div> aka getByText('Get helpSend us a')
    2) <div tabindex="0" role="listbox" aria-expanded="false" class="ui item dropdown menuUserDropdown">…</div> aka getByText('Paul TrusselSettingsLog out')
    3) <div tabindex="0" role="listbox" aria-expanded="true" class="ui active visible dropdown">…</div> aka getByText('File new claim Filing for:')

Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('div[role="listbox"]')

    at /Users/pejin/Documents/Playwright new/tests/claim_symetra.spec.ts:27:23
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { config } from './reusable.ts';
   3 |
   4 | test('My first test', async ({ page }) => {
   5 |   console.log('✅ Navigating to Member Portal...');
   6 |   await page.goto(config.urlMemberSymetra, { waitUntil: 'domcontentloaded' });
   7 |
   8 |   console.log('✅ Filling in Login form...');
   9 |   const emailInput = page.getByRole('textbox', { name: 'Enter your email' });
  10 |   await emailInput.type(config.userMemberSymetra, { delay: 10 });
  11 |
  12 |   const passwordInput = page.locator('input[name="password"]');
  13 |   await passwordInput.type(config.passwordMemberSymetra, { delay: 10 });
  14 |
  15 |   await page.getByRole('button', { name: 'Sign in' }).click();
  16 |
  17 |   console.log('✅ Waiting for Dashboard to load...');
  18 |   await page.waitForTimeout(15000); // Adjust the timeout as needed
  19 |
  20 | // 1. Click "File new claim" button
  21 | await page.getByRole('button', { name: 'File new claim' }).click();
  22 |
  23 | // 2. Locate listbox
  24 | const listbox = page.locator('div[role="listbox"]');
  25 |
  26 | // 3. Wait for the listbox itself to be visible
> 27 | await expect(listbox).toBeVisible();
     |                       ^ Error: expect.toBeVisible: Error: strict mode violation: locator('div[role="listbox"]') resolved to 3 elements:
  28 |
  29 | // 4. Wait for buttons to appear inside
  30 | const buttonsInsideListbox = listbox.locator('button');
  31 |
  32 | // 5. Wait until at least one button is attached and visible
  33 | await expect(buttonsInsideListbox.first()).toBeAttached();
  34 | await expect(buttonsInsideListbox.first()).toBeVisible();
  35 |
  36 | // 6. Small delay to let animation complete (important!)
  37 | await page.waitForTimeout(300); // <-- small wait fixes animation
  38 |
  39 | // 7. Now click on the first button
  40 | await buttonsInsideListbox.first().click({ force: true });
  41 | console.log('✅ Clicked on first member.');
  42 |
  43 |
  44 |   await page.getByRole('button', { name: 'Next step' }).click();
  45 |
  46 |   await page.locator('textarea[name="symptoms"]').fill('test');
  47 |   await page.locator('textarea[name="providerDiagnosis"]').fill('test');
  48 |   await page.locator('textarea[name="treatment"]').fill('test');
  49 |   await page.locator('textarea[name="additionalInfo"]').fill('test');
  50 |   await page.waitForTimeout(1000);
  51 |   await page.getByRole('button', { name: 'Next step' }).click();
  52 |
  53 |
  54 |   await page.getByText('Emergency room').click();
  55 |   for (let i = 0; i < 10; i++) {
  56 |     await page.mouse.wheel(0, 200);
  57 |     await page.waitForTimeout(100);
  58 |   }
  59 | // 1. Type into the hospital field
  60 | await page.locator('input.prompt').fill('Hospital');
  61 |
  62 | // 2. Wait for the suggestions to appear
  63 | await page.waitForSelector('.results.visible .result');
  64 |
  65 | // 3. Click the first suggestion
  66 | await page.locator('.results.visible .result').first().click();
  67 |
  68 | console.log('✅ Successfully clicked the first hospital!');
  69 | //Tell us where you were treated
  70 | await page.getByRole('button', { name: 'Next step' }).click();
  71 | //Let´s prepare your documents
  72 | await page.getByRole('button', { name: 'Next step' }).click();
  73 | // Upload your pictures
  74 | await page.getByRole('button', { name: 'Next step' }).click();
  75 | // Confirm uploads
  76 | await page.getByRole('button', { name: 'Next step' }).click();
  77 | // Payment preference
  78 | await page.getByRole('button', { name: '+Add payment method' }).click();
  79 | await page.getByRole('row', { name: 'PayPal payout method Configure' }).getByRole('button').click();
  80 | await page.locator('input[name="username"]').fill('igor.pejin+anselquotetest@joinansel.com');
  81 | await page.locator('input[name="confirmUsername"]').fill('igor.pejin+anselquotetest@joinansel.com');
  82 | await page.getByRole('button', { name: 'Submit' }).click();
  83 | await page.waitForTimeout(4000);
  84 | await page.getByRole('button', { name: 'Next step' }).click();
  85 |
  86 | for (let i = 0; i < 10; i++) {
  87 |     await page.mouse.wheel(0, 400);
  88 |     await page.waitForTimeout(100);
  89 |   }
  90 |  await page.locator('label').first().click();
  91 |  await page.getByRole('button', { name: 'Submit' }).click();
  92 |
  93 |  await page.getByRole('button', { name: 'All done' }).click();
  94 |  
  95 | });
```