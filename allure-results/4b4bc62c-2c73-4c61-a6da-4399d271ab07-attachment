# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Salesforce Enrollment Link Click (Optimized)
- Location: /Users/pejin/Documents/Playwright QA/tests/test-4.spec.ts:3:5

# Error details

```
Error: locator.click: Error: strict mode violation: locator('button.sc-FEMpB.kZyBJl.linkText.small') resolved to 2 elements:
    1) <button class="sc-FEMpB kZyBJl linkText small">Print recommendations</button> aka getByRole('button', { name: 'Print recommendations' })
    2) <button class="sc-FEMpB kZyBJl linkText small">Email recommendations</button> aka getByRole('button', { name: 'Email recommendations' })

Call log:
  - waiting for locator('button.sc-FEMpB.kZyBJl.linkText.small')

    at /Users/pejin/Documents/Playwright QA/tests/test-4.spec.ts:99:23
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Salesforce Enrollment Link Click (Optimized)', async ({ page }) => {
   4 |     console.log('🚀 Starting Test');
   5 |
   6 |     // Step 1: Login to Salesforce
   7 |     await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract_Terms__c/a91QL000001oyV3YAI/view', { waitUntil: 'domcontentloaded' });
   8 |
   9 |     await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   10 |     await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   11 |     await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   12 |
   13 |     // Wait for Salesforce dashboard to load
   14 |     await page.waitForTimeout(5000);
   15 |     console.log('✅ Logged in to Salesforce.');
   16 |
   17 |     // Step 2: Find and Click Enrollment Link
   18 |     console.log('🔍 Looking for the enrollment link...');
   19 |     const linkElement = page.getByText('https://qa-aig-platform.joinansel.com/enrollment/?token=VJkMTOaJMlHZWa-8Tee_UfDicwqgjMfu-EsJNbuk1n6bOl8HS4sRtqCmK5MiGiJgrlsrdrQX5fjze9eOyZUsi9lnxrA8pXzj-VNPG9aloBv68cpDgNgmXaOQ4uzmFWYQxQPVp-zv8ykioU74g-nFouyN7YIbPh9M5FmPJwGHanF2x04RQtgJaYcdMrMU0493nOpjen8odtrltFwFWX6nkXXnf-uLXdBVQ1pmVnwmOMYh1z7fttJch1qjhztaS0hoiQJKZg0hf-xltMZLxD4s-J3Ari-vSdA5MVuBbOEpydLv9ORjUhk29G1JPAjfp4JFew_pzuBgrm2DWs5fVan6CHh3Vl5jx7iZFd6z-y6VYYonfgDJksID71oksmwXVtl_8H8jICIRahKgj-Z8XYvMHf_MRu9WKY2MnciB8Lka6qng8oNHr-DZNf-hGDn8JaGhHhxtpc9_0ZuhwG5dGx4nUalNxUyvgbgt4h31IMJWsetKX6xRX4u_XVKmiphDq_HcfUJ437ENemz1hNrp5GBZXVoMGVmPXNc0Z_D7ybmmeIBGfTm-kn6WsitwTDFoLka_ps_KJ4OqbW6FAQP7C2C95Dy3aLTDniLZVkzJFLeDWdT2g2flVZjFOREE-T2GaiFZPR8FaXWQilC2ZL3mdzhul4ApAPUAYlTVOvCiN2YfUm02Y5NEQDCLNyjW06KK3MZ8J50SL4Qzsi0-m0-nz3QkElt2zT0maGZv7Qq0ToKYamQp4vqGV3dQEpeM48Ft0pgZE8AWmwwpTT-MgoNBCXfFHaTVE7PZJsGeCXZnw-1c1NAMi-axssaYagheZAi5TLDVZNa6oTuw1Z5I7UeZlOPSOIPEPKbRLNTL2COhmjnEZMrUYrdhWXIMDiJkAkUARxBgdK8hxormA186uSrwtq8GBAABUHr7JIlbQrvgaeEGpCGfGb3kHB6_D4T5CbC2Qv6zVjp_8BO7klp2dwCkmeNOWUlB69etLyWb3_gjhJAmkksXRXrqsbmLTdZYyz0BPFkJ4i7kU0NWaMJO0otqS-1WR3OeLMCYHQ_Gx7yyi6M5_u6X5mQr5YUbTEiitEnc1paOA8rp5yEPCxPT69yG3bLMByI2ThkOS7M_oV-U-c7jd-yuVdnD-f6CeyzPrjzBvsFviLzgu5Gtdz2zaSY_fmQSntPgmYAGniyt1e_xUFnrxsnCTCvi4_5errgEImSIu_mO');
   20 |
   21 |     if (await linkElement.isVisible()) {
   22 |         const linkText = await linkElement.innerText();
   23 |         await page.goto(linkText, { waitUntil: 'domcontentloaded' });
   24 |     } else {
   25 |         console.log('⚠️ Link not found, trying alternative methods...');
   26 |
   27 |         await page.getByRole('button', { name: 'Get The Link' }).click();
   28 |
   29 |         // Shadow DOM Handling
   30 |         const shadowLink = await page.evaluate(() => {
   31 |             const shadowHost = document.querySelector('#sectionContent-174');
   32 |             return shadowHost?.shadowRoot?.querySelector('a')?.getAttribute('href') ?? null;
   33 |         });
   34 |
   35 |         if (shadowLink) {
   36 |             await page.goto(shadowLink, { waitUntil: 'domcontentloaded' });
   37 |         } else {
   38 |             console.log('⚠️ Trying XPath method...');
   39 |             const xpathLink = page.locator('//a[contains(text(), "https://qa-aig-platform.joinansel.com/enrollment")]');
   40 |             if (await xpathLink.isVisible()) {
   41 |                 await xpathLink.click({ force: true });
   42 |             } else {
   43 |                 console.log('❌ Could not find the enrollment link.');
   44 |                 return; // Exit test if the link isn't found
   45 |             }
   46 |         }
   47 |     }
   48 |
   49 |     // Step 3: Fill Form Details
   50 |     console.log('📝 Filling out form details...');
   51 |     await page.getByRole('textbox').fill('9QfzXO0@');
   52 |     await page.getByRole('button', { name: 'Next step' }).click();
   53 |
   54 |     await page.locator('input[name="firstName"]').fill('John');
   55 |     await page.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill('10/15/1999');
   56 |     await page.getByRole('combobox').locator('i').click();
   57 |
   58 |     await page.getByRole('button', { name: 'Next step' }).waitFor({ state: 'visible', timeout: 60000 });
   59 |
   60 |     // Step 4: Function to Click "Next step" with Delay
   61 |     async function clickNextStepWithDelay(delay = 1000) {
   62 |         await page.getByRole('button', { name: 'Next step' }).click();
   63 |     }
   64 |
   65 |     // Proceed through form with controlled delays
   66 |     await clickNextStepWithDelay(1500);
   67 |     await clickNextStepWithDelay(1500);
   68 |     await page.getByText('Yes', { exact: true }).click();
   69 |     await page.getByText('Yes', { exact: true }).click();
   70 |     await page.getByText('Yes, my youngest child is under 18 years old').click();
   71 |
   72 |     await clickNextStepWithDelay(1500);
   73 |     await clickNextStepWithDelay(1500);
   74 |     await clickNextStepWithDelay(2000);
   75 |     await clickNextStepWithDelay(2000);
   76 |     await clickNextStepWithDelay(2000);
   77 |     await clickNextStepWithDelay(2000);
   78 |     await clickNextStepWithDelay(2000);
   79 |     await clickNextStepWithDelay(2000);
   80 |     await clickNextStepWithDelay(2000);
   81 |     await clickNextStepWithDelay(2000);
   82 |
   83 |
   84 |     // Confirm selections
   85 |     await page.getByText('Yes').click();
   86 |     await page.getByText('I typically pay copays').click();
   87 |     await clickNextStepWithDelay(1500);
   88 |
   89 |     await page.getByText('I generally can purchase').click();
   90 |     await clickNextStepWithDelay(2500);
   91 |
   92 |     console.log('🔍 Waiting for "Email recommendations" button to be available...');
   93 |     
   94 |     // Locate the button using a precise class selector
   95 |     const emailButton = page.locator('button.sc-FEMpB.kZyBJl.linkText.small');
   96 |         
   97 |         
   98 |     // Click the button
>  99 |     await emailButton.click();
      |                       ^ Error: locator.click: Error: strict mode violation: locator('button.sc-FEMpB.kZyBJl.linkText.small') resolved to 2 elements:
  100 |     console.log('✅ Clicked "Email recommendations".');
  101 |
  102 |
  103 |         await page.getByRole('textbox', { name: 'Enter your email' }).fill('igor.pejin+testaigemail@joinansel.com');
  104 |     await page.getByRole('button', { name: 'Send recommendations' }).click();   
  105 |   
  106 |
  107 |     console.log('🎯 Test Completed.');
  108 | });
```