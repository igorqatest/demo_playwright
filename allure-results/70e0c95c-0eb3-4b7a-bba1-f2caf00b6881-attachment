# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping link flow - stable
- Location: /Users/pejin/Documents/Playwright QA/tests/shopping_ansel.spec.ts:86:5

# Error details

```
Error: locator.innerText: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('span').nth(1025)

    at /Users/pejin/Documents/Playwright QA/tests/shopping_ansel.spec.ts:154:29
```

# Test source

```ts
   54 |   // Click the "Get The Link" button
   55 | await page.getByRole('button', { name: 'Get The Link' }).click();
   56 | console.log('üîò Clicked "Get The Link"');
   57 |
   58 | // Wait for one of the textareas to populate (optional timeout buffer)
   59 | await page.waitForTimeout(1000);
   60 |
   61 | // Grab the specific <textarea> by ID or other unique selector
   62 | const textArea = page.locator('#input-1762'); // adjust if dynamic
   63 |
   64 | // Wait until the field contains a valid link
   65 | await expect(async () => {
   66 |   const value = await textArea.inputValue();
   67 |   console.log('üìã Raw extracted value:', value);
   68 |   expect(value).toMatch(/^https:\/\/.+/);
   69 | }).toPass({ timeout: 10000 });
   70 |
   71 | // Extract and log
   72 | const link = await textArea.inputValue();
   73 | console.log(`üîó Extracted standalone link: ${link}`);
   74 |
   75 | // Navigate to the link
   76 | try {
   77 |   await page.goto(link, { waitUntil: 'domcontentloaded', timeout: 20000 });
   78 |   console.log('üöÄ Navigated to extracted link successfully!');
   79 | } catch (err) {
   80 |   console.error('‚ùå Failed to navigate to extracted link:', err);
   81 | }
   82 | }); */
   83 |
   84 | import { test, expect } from '@playwright/test';
   85 |
   86 | test('Shopping link flow - stable', async ({ page, context }) => {
   87 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   88 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   89 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   90 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   91 |   console.log('üß≠ Logged in and navigating to Contract page');
   92 |
   93 |   await page.getByRole('tab', { name: 'Related' }).click();
   94 |   console.log('üìÇ Opened Related tab');
   95 |
   96 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 30);
   97 |
   98 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   99 |   await expect(csLink).toBeVisible({ timeout: 5000 });
  100 |   await csLink.click();
  101 |   console.log('üîó Clicked CS- link');
  102 |
  103 |   await page.waitForTimeout(1000);
  104 |   await page.getByRole('tab', { name: 'Related' }).click();
  105 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
  106 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
  107 |
  108 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
  109 |   await firstNameLink.click({ force: true });
  110 |   console.log('‚úÖ Clicked on the first name link in the list');
  111 |
  112 |   await page.waitForTimeout(1000);
  113 |   await page.getByRole('tab', { name: 'Details' }).click();
  114 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
  115 |
  116 |   // üîç SSN
  117 |   const ssn = await page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first().innerText();
  118 |   console.log(`üîê SSN: ${ssn}`);
  119 |
  120 |   // üéÇ DOB
  121 |   const dobElement = page.locator('lightning-formatted-text').locator('xpath=../../..').filter({ hasText: 'Date of Birth' }).locator('lightning-formatted-text');
  122 |   const dobRaw = await dobElement.innerText();
  123 |   let [month, day, year] = dobRaw.split('/');
  124 |   month = month.padStart(2, '0');
  125 |   day = day.padStart(2, '0');
  126 |   const dob = `${month}/${day}/${year}`;
  127 |   console.log(`üéÇ DOB: ${dob}`);
  128 |
  129 |   // üîó Get the shopping link
  130 |   await page.getByRole('button', { name: 'Get The Link' }).click();
  131 |   console.log('üéØ Clicked "Get The Link"');
  132 |
  133 |   let link = '';
  134 | const maxRetries = 10;
  135 | const retryInterval = 1000; // 1 second
  136 |
  137 | for (let i = 0; i < maxRetries; i++) {
  138 |   // Attempt to extract from <textarea>
  139 |   const textareas = await page.locator('textarea').all();
  140 |   for (const ta of textareas) {
  141 |     const val = (await ta.inputValue()).trim();
  142 |     if (val.startsWith('https://')) {
  143 |       link = val;
  144 |       console.log('‚úÖ Extracted link from <textarea>');
  145 |       break;
  146 |     }
  147 |   }
  148 |
  149 |   if (link) break;
  150 |
  151 |   // Attempt to extract from <span>
  152 |   const spans = await page.locator('span').all();
  153 |   for (const span of spans) {
> 154 |     const val = (await span.innerText()).trim();
      |                             ^ Error: locator.innerText: Test timeout of 30000ms exceeded.
  155 |     if (val.startsWith('https://')) {
  156 |       link = val;
  157 |       console.log('‚úÖ Extracted link from <span>');
  158 |       break;
  159 |     }
  160 |   }
  161 |
  162 |   if (link) break;
  163 |
  164 |   // Attempt to extract from <a>
  165 |   const anchors = await page.locator('a').all();
  166 |   for (const a of anchors) {
  167 |     const href = (await a.getAttribute('href'))?.trim();
  168 |     if (href?.startsWith('https://')) {
  169 |       link = href;
  170 |       console.log('‚úÖ Extracted link from <a>');
  171 |       break;
  172 |     }
  173 |   }
  174 |
  175 |   if (link) break;
  176 |
  177 |   console.log(`‚è≥ Link not found yet. Retrying in ${retryInterval / 1000} seconds...`);
  178 |   await page.waitForTimeout(retryInterval);
  179 | }
  180 |
  181 | if (!link) {
  182 |   throw new Error('‚ùå No valid shopping link found after multiple attempts.');
  183 | }
  184 |
  185 | console.log(`üîó Final extracted shopping link: ${link}`);
  186 |
  187 |   // üåê Open in new tab
  188 |   const newPage = await context.newPage();
  189 |   await newPage.goto('about:blank');
  190 |   await newPage.evaluate(() => {
  191 |     localStorage.removeItem('partner-fsl');
  192 |     sessionStorage.clear();
  193 |     console.log('üßπ Cleared session');
  194 |   });
  195 |   await newPage.goto(link, { waitUntil: 'domcontentloaded' });
  196 |   console.log('üöÄ Opened enrollment link');
  197 |
  198 |   // ‚úÖ Verification
  199 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  200 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
  201 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
  202 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  203 |   console.log('üìù Filled DOB and SSN');
  204 |
  205 |   // ‚úÖ Household info
  206 |   const marriedNo = newPage.getByRole('radio', { name: 'No' });
  207 |   if (await marriedNo.isVisible()) await marriedNo.click();
  208 |
  209 |   const notParent = newPage.getByText("I'm not a parent");
  210 |   if (await notParent.isVisible()) await notParent.click();
  211 |
  212 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  213 |   console.log('üë™ Household questions');
  214 |
  215 |   // ‚è≠ Continue steps
  216 |   for (let i = 1; i <= 8; i++) {
  217 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  218 |     console.log(`‚û°Ô∏è Page ${i + 2} complete`);
  219 |   }
  220 |
  221 |   await newPage.getByRole('link', { name: 'Skip this' }).click();
  222 |   console.log('üèÉ Skipped optional promo');
  223 |
  224 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  225 |   await newPage.waitForTimeout(1000);
  226 |   await newPage.getByRole('listbox').filter({ hasText: 'FemaleMale' }).click();
  227 |   await newPage.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill('1234567890');
  228 |   await newPage.getByRole('listbox').filter({ hasText: 'MobileStandard' }).click();
  229 |   await newPage.locator('input[name="SET_STREET_ADDRESS"]').fill('123 Main St');
  230 |   await newPage.locator('input[name="SET_ZIP_CODE"]').fill('12345');
  231 |   await newPage.locator('input[name="SET_CITY"]').fill('Random City');
  232 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  233 |   console.log('üì¨ Contact info filled');
  234 |
  235 |   await newPage.locator('input[name="password"]').fill('Demo123456');
  236 |   await newPage.locator('input[name="confirmPassword"]').fill('Demo123456');
  237 |   await newPage.evaluate(() => {
  238 |     const cb = document.querySelector('input[name="agreeToTerms"]');
  239 |     if (cb) cb.removeAttribute('readonly');
  240 |     (cb as HTMLInputElement)?.click();
  241 |   });
  242 |
  243 |   console.log('üîê Final step complete');
  244 | });
```