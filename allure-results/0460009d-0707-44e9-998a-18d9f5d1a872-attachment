# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping link extraction and flow with fresh start
- Location: /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:3:5

# Error details

```
Error: locator.click: Test ended.
Call log:
  - waiting for getByRole('link', { name: 'Prospectives (6+)' })

    at /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:26:63
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Shopping link extraction and flow with fresh start', async ({ page, context }) => {
   4 |   test.setTimeout(120_000);
   5 |
   6 |   console.log('üöÄ Starting login...');
   7 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   8 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   9 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   10 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   11 |
   12 |   console.log('‚úÖ Logged into Salesforce');
   13 |
   14 |   await page.getByRole('tab', { name: 'Related' }).click();
   15 |
   16 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 60);
   17 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   18 |
   19 |   try {
   20 |     await csLink.click({ timeout: 5000 });
   21 |   } catch {
   22 |     await csLink.click({ force: true });
   23 |   }
   24 |   await page.waitForTimeout(1000);
   25 |   await page.getByRole('tab', { name: 'Related' }).click();
>  26 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
      |                                                               ^ Error: locator.click: Test ended.
   27 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
   28 |
   29 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   30 |   await firstNameLink.click({ force: true });
   31 |
   32 |   await page.getByRole('tab', { name: 'Details' }).click();
   33 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
   34 |
   35 |   const ssn = await page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first().innerText();
   36 |   const dobRaw = await page
   37 |     .locator('lightning-formatted-text')
   38 |     .locator('xpath=../../..')
   39 |     .filter({ hasText: 'Date of Birth' })
   40 |     .locator('lightning-formatted-text')
   41 |     .innerText();
   42 |
   43 |   let [month, day, year] = dobRaw.split('/');
   44 |   const dob = `${month.padStart(2, '0')}/${day.padStart(2, '0')}/${year}`;
   45 |   console.log(`üß¨ SSN: ${ssn} | DOB: ${dob}`);
   46 |
   47 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   48 |
   49 |   // üß† Extract shopping link reliably
   50 |   let shoppingLink = '';
   51 |   for (let attempt = 0; attempt < 10; attempt++) {
   52 |     const textareas = await page.locator('textarea').all();
   53 |     for (const area of textareas) {
   54 |       const val = (await area.inputValue()).trim();
   55 |       if (val.startsWith('https://qa-ansel-platform.joinansel.com/enrollment')) {
   56 |         shoppingLink = val;
   57 |         break;
   58 |       }
   59 |     }
   60 |     if (shoppingLink) break;
   61 |     await page.waitForTimeout(1000);
   62 |   }
   63 |
   64 |   if (!shoppingLink) {
   65 |     throw new Error('‚ùå No valid shopping link found.');
   66 |   }
   67 |
   68 |   console.log(`üîó Found Shopping Link: ${shoppingLink}`);
   69 |
   70 |   // üßº Reset state & open in a new tab
   71 |   const newPage = await context.newPage();
   72 |   await newPage.goto('about:blank');
   73 |   await newPage.evaluate(() => {
   74 |     localStorage.clear();
   75 |     sessionStorage.clear();
   76 |   });
   77 |
   78 |   await newPage.goto(shoppingLink, { waitUntil: 'domcontentloaded' });
   79 |   console.log('üåê Opened link in new tab');
   80 |
   81 |   // ‚úÖ Begin flow
   82 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   83 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
   84 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
   85 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   86 |   console.log('üîì Verification passed');
   87 |
   88 |   // Handle marital & parent options if not already selected
   89 |   const marriedNo = newPage.getByRole('radio', { name: 'No' });
   90 |   const parentNone = newPage.getByRole('radio', { name: "I'm not a parent" });
   91 |
   92 |   if (!(await marriedNo.isChecked())) await marriedNo.click();
   93 |   if (!(await parentNone.isChecked())) await parentNone.click();
   94 |
   95 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   96 |   console.log('üë™ Household questions done');
   97 |
   98 |   // Optional steps...
   99 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  100 |   console.log('‚úÖ Flow continues...');
  101 | });
```