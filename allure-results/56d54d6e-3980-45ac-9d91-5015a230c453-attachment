# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: 📄 Extract Roster Member Fields from record page
- Location: /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:84:5

# Error details

```
Error: locator.scrollIntoViewIfNeeded: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('#field-section-content-195')

    at /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:123:28
```

# Test source

```ts
   23 |
   24 | /* import { test, expect } from '@playwright/test';
   25 |
   26 | test('Extract Roster Member Details', async ({ page }) => {
   27 |   console.log('🌐 Navigating to Roster Member detail page...');
   28 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Roster_Member__c/a9VQL000000AcDj2AK/view', {
   29 |     waitUntil: 'domcontentloaded'
   30 |   });
   31 |
   32 |   console.log('🔐 Logging in...');
   33 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   34 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   35 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   36 |
   37 |   console.log('⏳ Waiting for page content to load...');
   38 |   await page.waitForTimeout(4000);
   39 |
   40 |   // Targeting the detail panel
   41 |   const fieldsToExtract = [
   42 |     'Roster Member Name',
   43 |     'First Name',
   44 |     'Last Name',
   45 |     'Gender',
   46 |     'Date of Birth',
   47 |     'SocialSecurityNumber',
   48 |     'Email',
   49 |     'Phone',
   50 |     'Mobile Phone',
   51 |     'Status',
   52 |     'Role',
   53 |     'Age',
   54 |     'Street',
   55 |     'City',
   56 |     'Postal Code',
   57 |     'State',
   58 |     'Strategic Partner Name',
   59 |     'Owner'
   60 |   ];
   61 |
   62 |   for (const label of fieldsToExtract) {
   63 |     const field = page.locator(`div.slds-form-element__label:text-is("${label}")`).first();
   64 |     const value = field.locator('xpath=..').locator('.slds-form-element__control span');
   65 |
   66 |     try {
   67 |       const isVisible = await field.isVisible();
   68 |       if (isVisible) {
   69 |         const fieldValue = await value.textContent();
   70 |         console.log(`✅ ${label}: ${fieldValue?.trim() || '[Empty]'}`);
   71 |       } else {
   72 |         console.warn(`⚠️ ${label} not visible.`);
   73 |       }
   74 |     } catch (err) {
   75 |       console.error(`❌ Error extracting ${label}:`, err.message);
   76 |     }
   77 |   }
   78 |
   79 |   console.log('✅ Extraction complete!');
   80 | }); */
   81 |
   82 | import { test, expect } from '@playwright/test';
   83 |
   84 | test('📄 Extract Roster Member Fields from record page', async ({ page }) => {
   85 |   console.log('🌐 Navigating to Roster Member record...');
   86 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Roster_Member__c/a9VQL000000AcDj2AK/view');
   87 |
   88 |   console.log('🔐 Logging into Salesforce...');
   89 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   90 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   91 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   92 |
   93 |   console.log('⏳ Waiting for page to fully load...');
   94 |   await page.waitForSelector('.test-id__field-label');
   95 |   await page.waitForTimeout(2000);
   96 |
   97 |   const labelLocators = await page.locator('.test-id__field-label').all();
   98 |
   99 |   for (const label of labelLocators) {
  100 |     try {
  101 |       const labelText = (await label.textContent())?.trim() || '[No Label]';
  102 |
  103 |       // Go two levels up to get the full field container
  104 |       const container = label.locator('xpath=../../..');
  105 |       const valueLocator = container.locator('.test-id__field-value');
  106 |
  107 |       let valueText = '[No Value]';
  108 |
  109 |       const valueCount = await valueLocator.count();
  110 |       if (valueCount > 0) {
  111 |         valueText = (await valueLocator.first().textContent())?.trim() || '[No Value]';
  112 |       }
  113 |
  114 |       console.log(`📄 ${labelText}: ${valueText}`);
  115 |     } catch (err) {
  116 |       console.error(`❌ Error extracting value:`, err);
  117 |     }
  118 |   }
  119 |
  120 |    // 🔽 Scroll to Employment section
  121 |    console.log('\n🏢 Extracting Employment Details...');
  122 |    const employmentSection = page.locator('#field-section-content-195');
> 123 |    await employmentSection.scrollIntoViewIfNeeded();
      |                            ^ Error: locator.scrollIntoViewIfNeeded: Test timeout of 30000ms exceeded.
  124 |  
  125 |    const employmentLabels = employmentSection.locator('.test-id__field-label');
  126 |    const employmentCount = await employmentLabels.count();
  127 |  
  128 |    for (let i = 0; i < employmentCount; i++) {
  129 |      const label = employmentLabels.nth(i);
  130 |      const labelText = (await label.textContent())?.trim() || '[No Label]';
  131 |      const container = label.locator('xpath=../../..');
  132 |      const valueLocator = container.locator('.test-id__field-value');
  133 |      const valueText = (await valueLocator.first().textContent())?.trim() || '[No Value]';
  134 |  
  135 |      console.log(`🏢 ${labelText}: ${valueText}`);
  136 |    }
  137 |  
  138 |    console.log('\n✅ Extraction complete!');
  139 | });
```