# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Salesforce contact test with external link
- Location: /Users/pejin/Documents/Playwright QA/tests/test-24.spec.ts:3:5

# Error details

```
Error: locator.evaluate: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('link', { name: 'TypeScript' })

    at /Users/pejin/Documents/Playwright QA/tests/test-24.spec.ts:48:39
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Salesforce contact test with external link', async ({ page }) => {
   4 |   console.log('Navigating to Salesforce login URL...');
   5 |   await page.goto('https://ansel2-dev-ed.develop.my.salesforce.com/?ec=302&startURL=%2Fvisualforce%2Fsession%3Furl%3Dhttps%253A%252F%252Fansel2-dev-ed.develop.lightning.force.com%252Flightning');
   6 |
   7 |   console.log('Filling in username...');
   8 |   await page.getByRole('textbox', { name: 'Username' }).click();
   9 |   await page.getByRole('textbox', { name: 'Username' }).fill('pejinigor@gmail.com');
  10 |
  11 |   console.log('Filling in password...');
  12 |   await page.getByRole('textbox', { name: 'Password' }).click();
  13 |   await page.getByRole('textbox', { name: 'Password' }).fill('Test123456');
  14 |
  15 |   console.log('Clicking Log In...');
  16 |   await page.getByRole('button', { name: 'Log In' }).click();
  17 |
  18 |   console.log('Navigating to John Bond contact record...');
  19 |   await page.getByRole('link', { name: 'John Bond' }).click();
  20 |
  21 |   console.log('Switching to Details tab...');
  22 |   await page.getByRole('tab', { name: 'Details' }).click();
  23 |
  24 |   console.log('Waiting for half a second to ensure page stability...');
  25 |   await page.waitForTimeout(500);
  26 |
  27 |   console.log('Clicking the external link (https://playwright.dev/)...');
  28 |   const page1Promise = page.waitForEvent('popup');
  29 |   await page.getByRole('link', { name: 'https://playwright.dev/' }).click();
  30 |   const page1 = await page1Promise;
  31 |
  32 |   console.log('Verifying that Playwright site loaded and heading is visible...');
  33 |   await expect(page1.getByRole('heading', { name: 'Playwright enables reliable' }).locator('span')).toBeVisible();
  34 |
  35 |   console.log('âœ… Test completed successfully!');
  36 |
  37 | const hexColor = await page1.locator('text=Playwright enables reliable >> span').evaluate(test =>
  38 |   '#' + [...(getComputedStyle(test).color.match(/\d+/g) || [])]
  39 |     .slice(0, 3)
  40 |     .map(x => (+x).toString(16).padStart(2, '0'))
  41 |     .join('')
  42 |     .toUpperCase()
  43 | );
  44 |
  45 | console.log('Hex color:', hexColor);
  46 | const link = await page.getByRole('link', { name: 'TypeScript' });
  47 | await page.waitForTimeout(500);
> 48 | const typeScriptHexColor = await link.evaluate(el => {
     |                                       ^ Error: locator.evaluate: Test timeout of 30000ms exceeded.
  49 |   const rgb = getComputedStyle(el).color;
  50 |   const match = rgb.match(/\d+/g);
  51 |   if (!match) {
  52 |     throw new Error('Failed to extract RGB values from color string');
  53 |   }
  54 |   const [r, g, b] = match.map(Number);
  55 |   return (
  56 |     '#' +
  57 |     [r, g, b]
  58 |       .map(x => x.toString(16).padStart(2, '0'))
  59 |       .join('')
  60 |       .toUpperCase()
  61 |   );
  62 | });
  63 |
  64 | console.log('TypeScript link color:', typeScriptHexColor);
  65 |
  66 | });
```