# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping link flow - stable
- Location: /Users/pejin/Documents/Playwright QA/tests/shopping_ansel.spec.ts:86:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByRole('link', { name: /^CS-/ })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByRole('link', { name: /^CS-/ })

    at /Users/pejin/Documents/Playwright QA/tests/shopping_ansel.spec.ts:99:24
```

# Test source

```ts
   1 | /* import { test, expect } from '@playwright/test';
   2 |
   3 | test('test', async ({ page }) => {
   4 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   5 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   6 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   7 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   8 |
   9 |   console.log('üß≠ Logged in and navigating to Contract page');
   10 |
   11 |   // Click Related tab
   12 |   await page.getByRole('tab', { name: 'Related' }).click();
   13 |   console.log('üìÇ Opened Related tab');
   14 |
   15 |   // Manually scroll the page to the bottom (or a large Y value)
   16 |   for (let i = 0; i < 10; i++) {
   17 |     await page.mouse.wheel(0, 30);
   18 |   }
   19 |
   20 |   // Click the CS- link
   21 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   22 |   await csLink.click();
   23 |   console.log('üîó Clicked CS- link');
   24 |
   25 |   // Wait and click Related tab again
   26 |   await page.waitForTimeout(1000);
   27 |   await page.getByRole('tab', { name: 'Related' }).click();
   28 |
   29 |   
   30 |   // Scroll down again
   31 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
   32 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
   33 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   34 |
   35 | await firstNameLink.click({ force: true });
   36 |
   37 | console.log('‚úÖ Clicked on the first name link in the list');
   38 | await page.waitForTimeout(1000);
   39 |   await page.getByRole('tab', { name: 'Details' }).click();
   40 |   for (let i = 0; i < 10; i++) {
   41 |     await page.mouse.wheel(0, 100);
   42 |   }
   43 |   // üß† Extract SSN and DOB (pick the first match)
   44 | const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
   45 | const dobElement = page.locator('lightning-formatted-text').filter({ hasText: /\d{1,2}\/\d{1,2}\/\d{4}/ }).first();
   46 |
   47 | const ssn = await ssnElement.innerText();
   48 | const dob = await dobElement.innerText();
   49 |
   50 | console.log(`üîê Extracted SSN: ${ssn}`);
   51 | console.log(`üéÇ Extracted DOB: ${dob}`);
   52 |
   53 |   // üí° Save for future use if needed
   54 |   // Click the "Get The Link" button
   55 | await page.getByRole('button', { name: 'Get The Link' }).click();
   56 | console.log('üîò Clicked "Get The Link"');
   57 |
   58 | // Wait for one of the textareas to populate (optional timeout buffer)
   59 | await page.waitForTimeout(1000);
   60 |
   61 | // Grab the specific <textarea> by ID or other unique selector
   62 | const textArea = page.locator('#input-1762'); // adjust if dynamic
   63 |
   64 | // Wait until the field contains a valid link
   65 | await expect(async () => {
   66 |   const value = await textArea.inputValue();
   67 |   console.log('üìã Raw extracted value:', value);
   68 |   expect(value).toMatch(/^https:\/\/.+/);
   69 | }).toPass({ timeout: 10000 });
   70 |
   71 | // Extract and log
   72 | const link = await textArea.inputValue();
   73 | console.log(`üîó Extracted standalone link: ${link}`);
   74 |
   75 | // Navigate to the link
   76 | try {
   77 |   await page.goto(link, { waitUntil: 'domcontentloaded', timeout: 20000 });
   78 |   console.log('üöÄ Navigated to extracted link successfully!');
   79 | } catch (err) {
   80 |   console.error('‚ùå Failed to navigate to extracted link:', err);
   81 | }
   82 | }); */
   83 |
   84 | import { test, expect } from '@playwright/test';
   85 |
   86 | test('Shopping link flow - stable', async ({ page, context }) => {
   87 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   88 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   89 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   90 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   91 |   console.log('üß≠ Logged in and navigating to Contract page');
   92 |
   93 |   await page.getByRole('tab', { name: 'Related' }).click();
   94 |   console.log('üìÇ Opened Related tab');
   95 |
   96 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 30);
   97 |
   98 |   const csLink = page.getByRole('link', { name: /^CS-/ });
>  99 |   await expect(csLink).toBeVisible({ timeout: 5000 });
      |                        ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  100 |   await csLink.click();
  101 |   console.log('üîó Clicked CS- link');
  102 |
  103 |   await page.waitForTimeout(1000);
  104 |   await page.getByRole('tab', { name: 'Related' }).click();
  105 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
  106 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
  107 |
  108 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
  109 |   await firstNameLink.click({ force: true });
  110 |   console.log('‚úÖ Clicked on the first name link in the list');
  111 |
  112 |   await page.waitForTimeout(1000);
  113 |   await page.getByRole('tab', { name: 'Details' }).click();
  114 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
  115 |
  116 |   // üîç SSN
  117 |   const ssn = await page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first().innerText();
  118 |   console.log(`üîê SSN: ${ssn}`);
  119 |
  120 |   // üéÇ DOB
  121 |   const dobElement = page.locator('lightning-formatted-text').locator('xpath=../../..').filter({ hasText: 'Date of Birth' }).locator('lightning-formatted-text');
  122 |   const dobRaw = await dobElement.innerText();
  123 |   let [month, day, year] = dobRaw.split('/');
  124 |   month = month.padStart(2, '0');
  125 |   day = day.padStart(2, '0');
  126 |   const dob = `${month}/${day}/${year}`;
  127 |   console.log(`üéÇ DOB: ${dob}`);
  128 |
  129 |   // üîó Get the shopping link
  130 |   await page.getByRole('button', { name: 'Get The Link' }).click();
  131 |   console.log('üéØ Clicked "Get The Link"');
  132 |
  133 |   // üí° Click "Get The Link"
  134 | await page.getByRole('button', { name: 'Get The Link' }).click();
  135 | console.log('üéØ Clicked "Get The Link"');
  136 |
  137 | let link = '';
  138 |
  139 | // Try extracting from textareas
  140 | const textareas = await page.locator('textarea').all();
  141 | for (const ta of textareas) {
  142 |   const val = (await ta.inputValue()).trim();
  143 |   console.log(`üß™ Found value in textarea: ${val}`);
  144 |   if (val.startsWith('https://')) {
  145 |     link = val;
  146 |     break;
  147 |   }
  148 | }
  149 |
  150 | // Fallback: check span with class
  151 | if (!link) {
  152 |   const span = page.locator('span.test-id__field-value').filter({ hasText: /^https:\/\// });
  153 |   if (await span.count()) {
  154 |     link = (await span.first().innerText()).trim();
  155 |     console.log(`üß™ Found value in span: ${link}`);
  156 |   }
  157 | }
  158 |
  159 | // Fallback: check anchor tags
  160 | if (!link) {
  161 |   const anchors = await page.locator('a[href^="https://"]').all();
  162 |   for (const a of anchors) {
  163 |     const href = (await a.getAttribute('href'))?.trim();
  164 |     if (href && href.includes('enrollment')) {
  165 |       link = href;
  166 |       console.log(`üß™ Found value in anchor href: ${link}`);
  167 |       break;
  168 |     }
  169 |   }
  170 | }
  171 |
  172 | if (!link || !link.startsWith('https://')) {
  173 |   throw new Error(`‚ùå No valid shopping link found. Got: "${link}"`);
  174 | }
  175 | console.log(`‚úÖ Final extracted shopping link: ${link}`);
  176 |
  177 |   // üåê Open in new tab
  178 |   const newPage = await context.newPage();
  179 |   await newPage.goto('about:blank');
  180 |   await newPage.evaluate(() => {
  181 |     localStorage.removeItem('partner-fsl');
  182 |     sessionStorage.clear();
  183 |     console.log('üßπ Cleared session');
  184 |   });
  185 |   await newPage.goto(link, { waitUntil: 'domcontentloaded' });
  186 |   console.log('üöÄ Opened enrollment link');
  187 |
  188 |   // ‚úÖ Verification
  189 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  190 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
  191 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
  192 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  193 |   console.log('üìù Filled DOB and SSN');
  194 |
  195 |   // ‚úÖ Household info
  196 |   const marriedNo = newPage.getByRole('radio', { name: 'No' });
  197 |   if (await marriedNo.isVisible()) await marriedNo.click();
  198 |
  199 |   const notParent = newPage.getByText("I'm not a parent");
```