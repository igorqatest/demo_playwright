# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping flow with fresh start each time
- Location: /Users/pejin/Documents/Playwright QA/tests/shopping_ansel.spec.ts:86:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeEnabled()

Locator: getByRole('link', { name: /^CS-/ })
Expected: enabled
Received: <element(s) not found>
Call log:
  - expect.toBeEnabled with timeout 5000ms
  - waiting for getByRole('link', { name: /^CS-/ })

    at /Users/pejin/Documents/Playwright QA/tests/shopping_ansel.spec.ts:102:24
```

# Test source

```ts
   2 |
   3 | test('test', async ({ page }) => {
   4 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   5 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   6 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   7 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   8 |
   9 |   console.log('üß≠ Logged in and navigating to Contract page');
   10 |
   11 |   // Click Related tab
   12 |   await page.getByRole('tab', { name: 'Related' }).click();
   13 |   console.log('üìÇ Opened Related tab');
   14 |
   15 |   // Manually scroll the page to the bottom (or a large Y value)
   16 |   for (let i = 0; i < 10; i++) {
   17 |     await page.mouse.wheel(0, 30);
   18 |   }
   19 |
   20 |   // Click the CS- link
   21 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   22 |   await csLink.click();
   23 |   console.log('üîó Clicked CS- link');
   24 |
   25 |   // Wait and click Related tab again
   26 |   await page.waitForTimeout(1000);
   27 |   await page.getByRole('tab', { name: 'Related' }).click();
   28 |
   29 |   
   30 |   // Scroll down again
   31 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
   32 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
   33 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   34 |
   35 | await firstNameLink.click({ force: true });
   36 |
   37 | console.log('‚úÖ Clicked on the first name link in the list');
   38 | await page.waitForTimeout(1000);
   39 |   await page.getByRole('tab', { name: 'Details' }).click();
   40 |   for (let i = 0; i < 10; i++) {
   41 |     await page.mouse.wheel(0, 100);
   42 |   }
   43 |   // üß† Extract SSN and DOB (pick the first match)
   44 | const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
   45 | const dobElement = page.locator('lightning-formatted-text').filter({ hasText: /\d{1,2}\/\d{1,2}\/\d{4}/ }).first();
   46 |
   47 | const ssn = await ssnElement.innerText();
   48 | const dob = await dobElement.innerText();
   49 |
   50 | console.log(`üîê Extracted SSN: ${ssn}`);
   51 | console.log(`üéÇ Extracted DOB: ${dob}`);
   52 |
   53 |   // üí° Save for future use if needed
   54 |   // Click the "Get The Link" button
   55 | await page.getByRole('button', { name: 'Get The Link' }).click();
   56 | console.log('üîò Clicked "Get The Link"');
   57 |
   58 | // Wait for one of the textareas to populate (optional timeout buffer)
   59 | await page.waitForTimeout(1000);
   60 |
   61 | // Grab the specific <textarea> by ID or other unique selector
   62 | const textArea = page.locator('#input-1762'); // adjust if dynamic
   63 |
   64 | // Wait until the field contains a valid link
   65 | await expect(async () => {
   66 |   const value = await textArea.inputValue();
   67 |   console.log('üìã Raw extracted value:', value);
   68 |   expect(value).toMatch(/^https:\/\/.+/);
   69 | }).toPass({ timeout: 10000 });
   70 |
   71 | // Extract and log
   72 | const link = await textArea.inputValue();
   73 | console.log(`üîó Extracted standalone link: ${link}`);
   74 |
   75 | // Navigate to the link
   76 | try {
   77 |   await page.goto(link, { waitUntil: 'domcontentloaded', timeout: 20000 });
   78 |   console.log('üöÄ Navigated to extracted link successfully!');
   79 | } catch (err) {
   80 |   console.error('‚ùå Failed to navigate to extracted link:', err);
   81 | }
   82 | }); */
   83 |
   84 | import { test, expect } from '@playwright/test';
   85 |
   86 | test('Shopping flow with fresh start each time', async ({ page, context }) => {
   87 |   test.setTimeout(120_000);
   88 |
   89 |   // 1. Login to Salesforce
   90 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   91 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   92 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   93 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   94 |   console.log('üß≠ Logged into Salesforce');
   95 |
   96 |   await page.getByRole('tab', { name: 'Related' }).click();
   97 |   console.log('üìÇ Opened Related tab');
   98 |
   99 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 30);
  100 |
  101 |   const csLink = page.getByRole('link', { name: /^CS-/ });
> 102 |   await expect(csLink).toBeEnabled();
      |                        ^ Error: Timed out 5000ms waiting for expect(locator).toBeEnabled()
  103 |   await csLink.scrollIntoViewIfNeeded();
  104 |   await page.waitForTimeout(500);
  105 |
  106 |   try {
  107 |     await csLink.click({ timeout: 5000 });
  108 |     console.log('üîó Clicked CS- link successfully!');
  109 |   } catch (error) {
  110 |     console.warn('‚ö†Ô∏è CS- link not clickable on first try. Retrying with force...');
  111 |     await csLink.click({ force: true });
  112 |     console.log('‚úÖ Forced click on CS- link as fallback');
  113 |   }
  114 |
  115 |   await page.waitForTimeout(1000);
  116 |   await page.getByRole('tab', { name: 'Related' }).click();
  117 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
  118 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
  119 |
  120 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
  121 |   await firstNameLink.click({ force: true });
  122 |   console.log('‚úÖ Clicked first name in list');
  123 |
  124 |   await page.getByRole('tab', { name: 'Details' }).click();
  125 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
  126 |
  127 |   // Extract SSN
  128 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
  129 |   const ssn = await ssnElement.innerText();
  130 |   console.log(`üîê SSN: ${ssn}`);
  131 |
  132 |   // Extract and format DOB
  133 |   const dobElement = page.locator('lightning-formatted-text')
  134 |     .locator('xpath=../../..')
  135 |     .filter({ hasText: 'Date of Birth' })
  136 |     .locator('lightning-formatted-text');
  137 |   const dobRaw = await dobElement.innerText();
  138 |   let [month, day, year] = dobRaw.split('/');
  139 |   const dob = `${month.padStart(2, '0')}/${day.padStart(2, '0')}/${year}`;
  140 |   console.log(`üéÇ DOB: ${dob}`);
  141 |
  142 |   // Get the shopping link
  143 |   await page.getByRole('button', { name: 'Get The Link' }).click();
  144 |   console.log('üîó Clicked "Get The Link"');
  145 |
  146 |   let link = '';
  147 |   for (let i = 0; i < 10; i++) {
  148 |     const textareas = await page.locator('textarea').all();
  149 |     for (const ta of textareas) {
  150 |       const val = (await ta.inputValue()).trim();
  151 |       console.log(`üß™ Found textarea value: ${val}`);
  152 |       if (val.includes('https://qa-ansel-platform.joinansel.com/enrollment')) {
  153 |         link = val;
  154 |         break;
  155 |       }
  156 |     }
  157 |     if (link) break;
  158 |     await page.waitForTimeout(1000);
  159 |   }
  160 |
  161 |   if (!link) throw new Error('‚ùå No valid shopping link found.');
  162 |   console.log(`‚úÖ Final extracted shopping link: ${link}`);
  163 |
  164 |   // üåê Open it in a new tab and clear memory to avoid resuming last session
  165 |   const newPage = await context.newPage();
  166 |   await newPage.goto('about:blank'); // neutral start
  167 |   await newPage.context().clearCookies();
  168 |   await newPage.evaluate(() => {
  169 |     localStorage.clear();
  170 |     sessionStorage.clear();
  171 |     console.log('üßπ Cleared localStorage & sessionStorage');
  172 |   });
  173 |
  174 |   await newPage.goto(link, { waitUntil: 'domcontentloaded' });
  175 |   console.log('üöÄ Navigated to standalone enrollment page');
  176 |
  177 |   // 3. Verification
  178 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  179 |   console.log('üìÑ On Verification page');
  180 |
  181 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
  182 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
  183 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  184 |   console.log('‚úÖ Verification submitted');
  185 |
  186 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  187 |
  188 |   // 4. Additional questions
  189 |   await newPage.getByRole('radio', { name: 'No' }).click();
  190 |   await newPage.getByText("I'm not a parent").click();
  191 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  192 |   console.log('üë®‚Äçüë©‚Äçüëß Household info complete');
  193 |
  194 |   // 5. Step Progression
  195 |   for (let i = 1; i <= 8; i++) {
  196 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  197 |     console.log(`‚û°Ô∏è Page ${i + 2} complete`);
  198 |   }
  199 |
  200 |   await newPage.getByRole('link', { name: 'Skip this' }).click();
  201 |   console.log('üéÅ Skipped optional');
  202 |
```