# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: My first test
- Location: /Users/pejin/Documents/Playwright new/tests/claim_symetra.spec.ts:4:5

# Error details

```
Error: expect.toBeVisible: Error: strict mode violation: locator('div[role="listbox"]') resolved to 3 elements:
    1) <div tabindex="0" role="listbox" aria-expanded="false" class="ui item dropdown menuUserDropdown">‚Ä¶</div> aka getByText('Get helpSend us a')
    2) <div tabindex="0" role="listbox" aria-expanded="false" class="ui item dropdown menuUserDropdown">‚Ä¶</div> aka getByText('Paul TrusselSettingsLog out')
    3) <div tabindex="0" role="listbox" aria-expanded="true" class="ui active visible dropdown">‚Ä¶</div> aka getByText('File new claim Filing for:')

Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('div[role="listbox"]')

    at /Users/pejin/Documents/Playwright new/tests/claim_symetra.spec.ts:27:23
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { config } from './reusable.ts';
   3 |
   4 | test('My first test', async ({ page }) => {
   5 |   console.log('‚úÖ Navigating to Member Portal...');
   6 |   await page.goto(config.urlMemberSymetra, { waitUntil: 'domcontentloaded' });
   7 |
   8 |   console.log('‚úÖ Filling in Login form...');
   9 |   const emailInput = page.getByRole('textbox', { name: 'Enter your email' });
   10 |   await emailInput.type(config.userMemberSymetra, { delay: 10 });
   11 |
   12 |   const passwordInput = page.locator('input[name="password"]');
   13 |   await passwordInput.type(config.passwordMemberSymetra, { delay: 10 });
   14 |
   15 |   await page.getByRole('button', { name: 'Sign in' }).click();
   16 |
   17 |   console.log('‚úÖ Waiting for Dashboard to load...');
   18 |   await page.waitForTimeout(15000); // Adjust the timeout as needed
   19 |
   20 | // Click the "File new claim" button first
   21 | await page.getByRole('button', { name: 'File new claim' }).click();
   22 |
   23 | // Locate the listbox
   24 | const listbox = page.locator('div[role="listbox"]');
   25 |
   26 | // Wait until it appears
>  27 | await expect(listbox).toBeVisible();
      |                       ^ Error: expect.toBeVisible: Error: strict mode violation: locator('div[role="listbox"]') resolved to 3 elements:
   28 |
   29 | // ‚¨áÔ∏è DEFINE the buttons inside
   30 | const buttonsInsideListbox = listbox.locator('button');
   31 |
   32 | // Now wait for at least one button
   33 | await expect(buttonsInsideListbox.first()).toBeVisible();
   34 |
   35 | // üõ†Ô∏è Now you can safely count
   36 | const count = await buttonsInsideListbox.count();
   37 | console.log(`üëâ Members available: ${count}`);
   38 |
   39 | // üß† Click depending how many members
   40 | if (count > 1) {
   41 |   console.log('‚û°Ô∏è Clicking second member...');
   42 |   await buttonsInsideListbox.nth(1).click({ force: true });
   43 | } else if (count === 1) {
   44 |   console.log('‚û°Ô∏è Clicking first member...');
   45 |   await buttonsInsideListbox.first().click({ force: true });
   46 | } else {
   47 |   throw new Error('‚ùå No members found.');
   48 | }
   49 |
   50 |
   51 |   await page.getByRole('button', { name: 'Next step' }).click();
   52 |
   53 |   await page.locator('textarea[name="symptoms"]').fill('test');
   54 |   await page.locator('textarea[name="providerDiagnosis"]').fill('test');
   55 |   await page.locator('textarea[name="treatment"]').fill('test');
   56 |   await page.locator('textarea[name="additionalInfo"]').fill('test');
   57 |   await page.waitForTimeout(1000);
   58 |   await page.getByRole('button', { name: 'Next step' }).click();
   59 |
   60 |
   61 |   await page.getByText('Emergency room').click();
   62 |   for (let i = 0; i < 10; i++) {
   63 |     await page.mouse.wheel(0, 200);
   64 |     await page.waitForTimeout(100);
   65 |   }
   66 | // 1. Type into the hospital field
   67 | await page.locator('input.prompt').fill('Hospital');
   68 |
   69 | // 2. Wait for the suggestions to appear
   70 | await page.waitForSelector('.results.visible .result');
   71 |
   72 | // 3. Click the first suggestion
   73 | await page.locator('.results.visible .result').first().click();
   74 |
   75 | console.log('‚úÖ Successfully clicked the first hospital!');
   76 | //Tell us where you were treated
   77 | await page.getByRole('button', { name: 'Next step' }).click();
   78 | //Let¬¥s prepare your documents
   79 | await page.getByRole('button', { name: 'Next step' }).click();
   80 | // Upload your pictures
   81 | await page.getByRole('button', { name: 'Next step' }).click();
   82 | // Confirm uploads
   83 | await page.getByRole('button', { name: 'Next step' }).click();
   84 | // Payment preference
   85 | await page.getByRole('button', { name: '+Add payment method' }).click();
   86 | await page.getByRole('row', { name: 'PayPal payout method Configure' }).getByRole('button').click();
   87 | await page.locator('input[name="username"]').fill('igor.pejin+anselquotetest@joinansel.com');
   88 | await page.locator('input[name="confirmUsername"]').fill('igor.pejin+anselquotetest@joinansel.com');
   89 | await page.getByRole('button', { name: 'Submit' }).click();
   90 | await page.waitForTimeout(4000);
   91 | await page.getByRole('button', { name: 'Next step' }).click();
   92 |
   93 | for (let i = 0; i < 10; i++) {
   94 |     await page.mouse.wheel(0, 400);
   95 |     await page.waitForTimeout(100);
   96 |   }
   97 |  await page.locator('label').first().click();
   98 |  await page.getByRole('button', { name: 'Submit' }).click();
   99 |
  100 |  await page.getByRole('button', { name: 'All done' }).click();
  101 |  
  102 | });
```