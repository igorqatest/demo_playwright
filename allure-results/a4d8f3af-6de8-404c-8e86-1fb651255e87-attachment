# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: test
- Location: /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:3:5

# Error details

```
Error: locator.click: Target page, context or browser has been closed
Call log:
  - waiting for getByRole('link', { name: /^CS-/ })

    at /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:22:16
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('test', async ({ page }) => {
   4 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   5 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   6 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   7 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   8 |
   9 |   console.log('🧭 Logged in and navigating to Contract page');
  10 |
  11 |   // Click Related tab
  12 |   await page.getByRole('tab', { name: 'Related' }).click();
  13 |   console.log('📂 Opened Related tab');
  14 |
  15 |   // Manually scroll the page to the bottom (or a large Y value)
  16 |   for (let i = 0; i < 10; i++) {
  17 |     await page.mouse.wheel(0, 30);
  18 |   }
  19 |
  20 |   // Click the CS- link
  21 |   const csLink = page.getByRole('link', { name: /^CS-/ });
> 22 |   await csLink.click();
     |                ^ Error: locator.click: Target page, context or browser has been closed
  23 |   console.log('🔗 Clicked CS- link');
  24 |
  25 |   // Wait and click Related tab again
  26 |   await page.waitForTimeout(1000);
  27 |   await page.getByRole('tab', { name: 'Related' }).click();
  28 |
  29 |   
  30 |   // Scroll down again
  31 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
  32 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
  33 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
  34 |
  35 | await firstNameLink.click({ force: true });
  36 |
  37 | console.log('✅ Clicked on the first name link in the list');
  38 | await page.waitForTimeout(1000);
  39 |   await page.getByRole('tab', { name: 'Details' }).click();
  40 |   for (let i = 0; i < 10; i++) {
  41 |     await page.mouse.wheel(0, 100);
  42 |   }
  43 |   // 🧠 Extract SSN and DOB (pick the first match)
  44 | const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
  45 | const dobElement = page.locator('lightning-formatted-text').filter({ hasText: /\d{1,2}\/\d{1,2}\/\d{4}/ }).first();
  46 |
  47 | const ssn = await ssnElement.innerText();
  48 | const dob = await dobElement.innerText();
  49 |
  50 | console.log(`🔐 Extracted SSN: ${ssn}`);
  51 | console.log(`🎂 Extracted DOB: ${dob}`);
  52 |
  53 |   // 💡 Save for future use if needed
  54 |   // Click the "Get The Link" button
  55 | await page.getByRole('button', { name: 'Get The Link' }).click();
  56 | console.log('🔘 Clicked "Get The Link"');
  57 |
  58 | // Wait for one of the textareas to populate (optional timeout buffer)
  59 | await page.waitForTimeout(1000);
  60 |
  61 | // Grab the specific <textarea> by ID or other unique selector
  62 | const textArea = page.locator('#input-1762'); // adjust if dynamic
  63 |
  64 | // Wait until the field contains a valid link
  65 | await expect(async () => {
  66 |   const value = await textArea.inputValue();
  67 |   console.log('📋 Raw extracted value:', value);
  68 |   expect(value).toMatch(/^https:\/\/.+/);
  69 | }).toPass({ timeout: 10000 });
  70 |
  71 | // Extract and log
  72 | const link = await textArea.inputValue();
  73 | console.log(`🔗 Extracted standalone link: ${link}`);
  74 |
  75 | // Navigate to the link
  76 | try {
  77 |   await page.goto(link, { waitUntil: 'domcontentloaded', timeout: 20000 });
  78 |   console.log('🚀 Navigated to extracted link successfully!');
  79 | } catch (err) {
  80 |   console.error('❌ Failed to navigate to extracted link:', err);
  81 | }
  82 | });
```