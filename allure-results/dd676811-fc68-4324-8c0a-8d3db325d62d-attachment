# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping only Primary
- Location: /Users/pejin/Documents/Playwright new/tests/ansel_shopping/ansel_spouse.spec.ts:4:5

# Error details

```
Error: locator.click: Error: strict mode violation: getByRole('option', { name: 'Male' }) resolved to 2 elements:
    1) <div role="option" aria-checked="false" aria-selected="true" class="selected item">‚Ä¶</div> aka getByRole('option', { name: 'Female' })
    2) <div class="item" role="option" aria-checked="false" aria-selected="false">‚Ä¶</div> aka getByRole('option', { name: 'Male', exact: true })

Call log:
  - waiting for getByRole('option', { name: 'Male' })

    at /Users/pejin/Documents/Playwright new/tests/ansel_shopping/ansel_spouse.spec.ts:143:59
```

# Test source

```ts
   43 |   // Extract and format DOB
   44 |   const dobElement = page.locator('lightning-formatted-text')
   45 |     .locator('xpath=../../..')
   46 |     .filter({ hasText: 'Date of Birth' })
   47 |     .locator('lightning-formatted-text');
   48 |
   49 |   const dobRaw = await dobElement.innerText();
   50 |   let [month, day, year] = dobRaw.split('/');
   51 |   month = month.padStart(2, '0');
   52 |   day = day.padStart(2, '0');
   53 |   const dob = `${month}/${day}/${year}`;
   54 |   console.log(`üéÇ Extracted and formatted DOB: ${dob}`);
   55 |
   56 |   // Click Get The Link
   57 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   58 |   console.log('üéØ Clicked "Get The Link"');
   59 |
   60 |   const validTextarea = page.locator('textarea').filter({ hasText: /^https:\/\/.+/ }).first();
   61 |   await expect(validTextarea).toBeVisible({ timeout: 10000 });
   62 |
   63 |   const shoppingLink = await validTextarea.inputValue();
   64 |   console.log(`üîó Extracted shopping link`);
   65 |
   66 |   // Open in a new tab (ensures fresh state and skips remembering old flow)
   67 |   const newPage = await context.newPage();
   68 |   await newPage.goto(shoppingLink, { waitUntil: 'domcontentloaded' });
   69 |   console.log('üÜï Navigated to shopping link in new tab');
   70 |
   71 |   // Proceed with verify step
   72 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   73 |   console.log('üîê Verification started');
   74 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
   75 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
   76 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   77 |   console.log('üîì Verification passed');
   78 |
   79 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   80 |
   81 |   // ‚úÖ Ensure fresh continuation from the correct start page
   82 |
   83 |    // Select "No" for married, and "I'm not a parent"
   84 |    await newPage.getByText('Yes', { exact: true }).click();
   85 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 60);
   86 |
   87 |   await newPage.getByText('I\'m not a parent').click();
   88 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   89 |   console.log('üë™ Household questions');
   90 |
   91 |   // ‚è≠ Continue steps
   92 |   for (let i = 1; i <= 8; i++) {
   93 |     await newPage.getByRole('button', { name: 'Next step' }).click();
   94 |     console.log(`‚û°Ô∏è Page ${i + 2} complete`);
   95 |   }
   96 |    // Let's talk about medical expenses
   97 |   await newPage.getByText('Yes').click();
   98 |   await newPage.getByText('I typically pay the full cost').click();
   99 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  100 |   console.log('üí∞ Medical expenses questions');
  101 |
  102 |   // We'll keep your budget in mind
  103 |   await newPage.getByText('I can purchase what I want').click();
  104 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  105 |     console.log('‚úÖ Purchasing what I want');
  106 |
  107 |
  108 | // Select Ansel benefits
  109 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  110 | await newPage.getByText('My spouse and me').click();
  111 |
  112 | console.log('‚úÖ Select ansel benefits');
  113 |
  114 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  115 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  116 |
  117 |   await newPage.waitForTimeout(1000);
  118 |   await newPage.getByRole('listbox').filter({ hasText: 'FemaleMale' }).click();
  119 | // Generate a random 10-digit phone number
  120 | const randomPhone = `9${Math.floor(100000000 + Math.random() * 900000000)}`;
  121 |
  122 | await newPage.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill(randomPhone);
  123 | console.log(`üì± Filled random phone number: ${randomPhone}`);  
  124 |
  125 | await newPage.getByRole('listbox').filter({ hasText: 'MobileStandard' }).click();
  126 |   await newPage.locator('input[name="SET_STREET_ADDRESS"]').fill('123 Main St');
  127 |   await newPage.locator('input[name="SET_ZIP_CODE"]').fill('12345');
  128 |   await newPage.locator('input[name="SET_CITY"]').fill('Random City');
  129 |
  130 |   // Add spouse
  131 |   await newPage.getByRole('button', { name: '+ Add dependent' }).click();
  132 |   await newPage.getByRole('listbox').filter({ hasText: 'SpouseChildDomestic' }).click();
  133 |   // Then select the 'Spouse' option
  134 | await newPage.getByRole('option', { name: 'Spouse' }).click();
  135 | await newPage.locator('input[name="firstName"]').fill('Jane');
  136 | await newPage.locator('input[name="lastName"]').fill('Doe');
  137 | await newPage.getByRole('listbox').filter({ hasText: /^FemaleMale$/ }).click();
  138 | // Now randomly pick one option
  139 | const options = ['Random', 'Male', 'Female'];
  140 | const randomOption = options[Math.floor(Math.random() * options.length)];
  141 |
  142 | // Then select the random option
> 143 | await newPage.getByRole('option', { name: randomOption }).click();
      |                                                           ^ Error: locator.click: Error: strict mode violation: getByRole('option', { name: 'Male' }) resolved to 2 elements:
  144 |
  145 | // Select date of birth
  146 | await newPage.locator('input[name="birthdate"]').fill('01/01/2004');
  147 |
  148 |   // SSN
  149 | // Helper to generate random SSN
  150 | function generateRandomSSN() {
  151 |     const part1 = Math.floor(100 + Math.random() * 900); // 3 digits
  152 |     const part2 = Math.floor(10 + Math.random() * 90);   // 2 digits
  153 |     const part3 = Math.floor(1000 + Math.random() * 9000); // 4 digits
  154 |     return `${part1}-${part2}-${part3}`;
  155 |   }
  156 |   
  157 |   // Then fill it
  158 |   const randomSSN = generateRandomSSN();
  159 |
  160 |
  161 |   await newPage.getByRole('button', { name: 'Save' }).click();
  162 |
  163 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  164 |   console.log('üì¨ Contact info filled');
  165 |
  166 |   await newPage.locator('input[name="password"]').fill('Demo123456');
  167 |   await newPage.locator('input[name="confirmPassword"]').fill('Demo123456');
  168 |   await newPage.evaluate(() => {
  169 |     const cb = document.querySelector('input[name="agreeToTerms"]');
  170 |     if (cb) cb.removeAttribute('readonly');
  171 |     (cb as HTMLInputElement)?.click();
  172 |   });
  173 |
  174 |
  175 |   // Done!
  176 |   console.log('‚úÖ Flow completed to this point.'); 
  177 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 200);
  178 |   await newPage.getByRole('button', { name: 'Submit' }).click();
  179 |   console.log('üîê Final step complete');
  180 |
  181 | });
```