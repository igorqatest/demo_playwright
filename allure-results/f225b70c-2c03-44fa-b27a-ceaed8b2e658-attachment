# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Generate and follow Implementation Link with CSV upload
- Location: /Users/pejin/Documents/Playwright QA/tests/implementation_form.spec.ts:56:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('button', { name: 'Next Step' })
    - locator resolved to <button disabled tabindex="-1" class="ui primary disabled button">Next Step</button>
  - attempting click action
    2 × waiting for element to be visible, enabled and stable
      - element is not enabled
    - retrying click action
    - waiting 20ms
    2 × waiting for element to be visible, enabled and stable
      - element is not enabled
    - retrying click action
      - waiting 100ms
    29 × waiting for element to be visible, enabled and stable
       - element is not enabled
     - retrying click action
       - waiting 500ms

    at /Users/pejin/Documents/Playwright QA/tests/implementation_form.spec.ts:116:57
```

# Test source

```ts
   16 |
   17 |   // 4. Wait for textarea to populate with a valid link
   18 |   const textArea = page.locator('textarea');
   19 |
   20 |   await expect(async () => {
   21 |     const value = await textArea.inputValue();
   22 |     expect(value).toMatch(/^https:\/\/.+/); // HTTPS validation
   23 |   }).toPass({ timeout: 10000 });
   24 |
   25 |   // 5. Extract the link
   26 |   const link = await textArea.inputValue();
   27 |   console.log(`✅ Implementation link found: ${link}`);
   28 |
   29 |   // 6. Go to the generated link
   30 |   await page.goto(link, { waitUntil: 'domcontentloaded' });
   31 |   console.log(`🚀 Navigated to: ${link}`);
   32 |    await page.getByText('Email').first().click();
   33 |    await page.getByRole('combobox').locator('i').click();
   34 |    await page.locator('input[name="eligible"]').fill('20');
   35 |    await page.getByText('Monthly', { exact: true }).click();
   36 |    await page.getByText('No', { exact: true }).click();
   37 |    await page.locator('input[name="billingContactFirstName"]').fill('Igor');
   38 |    await page.locator('input[name="billingContactLastName"]').fill('Pejin');
   39 |    await page.locator('input[name="billingContactEmail"]').fill('igor.pejin+anselquotetest@joinansel.com');
   40 |    await page.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill('1234567890');
   41 |    await page.getByText('Email').nth(3).click();
   42 |    await page.getByText('Date of hire', { exact: true }).click();
   43 |   await page.getByText('14').click();
   44 |   await page.locator('input[name="launchDate"]').fill('2025-04-14');
   45 |   await page.locator('input[name="enrollmentStart"]').fill('2023-10-14');
   46 |   await page.locator('input[name="enrollmentEnd"]').fill('2023-11-14');
   47 |
   48 |
   49 | }); */
   50 |
   51 | import { test, expect } from '@playwright/test';
   52 | import { faker } from '@faker-js/faker';
   53 | import { format, addDays } from 'date-fns';
   54 | import createCSV from './utils/generate-csv';
   55 |
   56 | test('Generate and follow Implementation Link with CSV upload', async ({ page }) => {
   57 |   console.log('🔐 Logging into Salesforce...');
   58 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   59 |
   60 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   61 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   62 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   63 |
   64 |   console.log('🧭 Navigating to contract page and clicking "Get The Link"...');
   65 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   66 |
   67 |   const textArea = page.locator('textarea');
   68 |   await expect(async () => {
   69 |     const value = await textArea.inputValue();
   70 |     expect(value).toMatch(/^https:\/\/.+/);
   71 |   }).toPass({ timeout: 10000 });
   72 |
   73 |   const link = await textArea.inputValue();
   74 |   console.log(`✅ Implementation link extracted: ${link}`);
   75 |
   76 |   console.log('🌐 Opening implementation link...');
   77 |   await page.goto(link, { waitUntil: 'domcontentloaded' });
   78 |
   79 |   // Generate random input values
   80 |   const firstName = faker.person.firstName();
   81 |   const lastName = faker.person.lastName();
   82 |   const email = `igor.pejin+${faker.string.alphanumeric(8)}@joinansel.com`;
   83 |
   84 |   const tomorrow = addDays(new Date(), 1);
   85 |   const launchDate = format(tomorrow, 'MM/dd/yyyy');
   86 |   const enrollmentStart = format(tomorrow, 'MM/dd/yyyy');
   87 |   const enrollmentEnd = format(addDays(tomorrow, 21), 'MM/dd/yyyy');
   88 |
   89 |   console.log(`👤 Name: ${firstName} ${lastName}`);
   90 |   console.log(`📧 Email: ${email}`);
   91 |   console.log(`📅 Dates → Launch: ${launchDate}, Start: ${enrollmentStart}, End: ${enrollmentEnd}`);
   92 |
   93 |   console.log('📝 Filling out the implementation form...');
   94 |   await page.getByText('Email').first().click();
   95 |   await page.getByRole('combobox').locator('i').click();
   96 |   await page.locator('input[name="eligible"]').fill('20');
   97 |   await page.getByText('Monthly', { exact: true }).click();
   98 |   await page.getByText('No', { exact: true }).click();
   99 |
  100 |   await page.locator('input[name="billingContactFirstName"]').fill(firstName);
  101 |   await page.locator('input[name="billingContactLastName"]').fill(lastName);
  102 |   await page.locator('input[name="billingContactEmail"]').fill(email);
  103 |   await page.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill('1234567890');
  104 |
  105 |   await page.getByText('Email').nth(3).click();
  106 |   await page.getByText('Date of hire', { exact: true }).click();
  107 |   await page.getByText('14').click(); // Adjust if needed
  108 |
  109 |   await page.locator('input[name="launchDate"]').fill(launchDate);
  110 |   await page.locator('input[name="enrollmentStart"]').fill(enrollmentStart);
  111 |   await page.locator('input[name="enrollmentEnd"]').fill(enrollmentEnd);
  112 |
  113 |   console.log('⬇️ Scrolling down to activate the Next Step button...');
  114 |   await page.locator('div').filter({ hasText: 'Implementation setupfor Kub,' }).nth(3).scrollIntoViewIfNeeded();
  115 |
> 116 |   await page.getByRole('button', { name: 'Next Step' }).click();
      |                                                         ^ Error: locator.click: Test timeout of 30000ms exceeded.
  117 |   console.log('👉 Proceeded to census upload step.');
  118 |
  119 |   console.log('📁 Generating census CSV...');
  120 |   const csvPath = await createCSV(10);
  121 |   console.log(`📄 CSV generated at: ${csvPath}`);
  122 |
  123 |   console.log('📤 Uploading census file...');
  124 |   await page.locator('input[type="file"]').setInputFiles(csvPath);
  125 |
  126 |   console.log('✅ Census file uploaded. Proceeding to next step...');
  127 |   await page.getByText('I verify that all employees').click();
  128 |   await page.getByRole('button', { name: 'Next Step' }).click();
  129 |
  130 |   console.log('🎉 Form submitted successfully.');
  131 | });
```