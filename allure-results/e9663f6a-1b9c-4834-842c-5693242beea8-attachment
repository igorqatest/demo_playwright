# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: My first test
- Location: /Users/pejin/Documents/Playwright new/tests/test-1.spec.ts:4:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByRole('link', { name: 'Coverage' })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByRole('link', { name: 'Coverage' })

    at /Users/pejin/Documents/Playwright new/tests/test-1.spec.ts:20:62
```

# Test source

```ts
   1 | import {test, expect} from '@playwright/test';
   2 | import {config} from './reusable.ts';
   3 |
   4 | test('My first test', async ({ page }) => {
   5 |     await page.goto(config.urlMemberAnsel, { waitUntil: 'load' });
   6 |     //await page.getByRole('textbox', { name: 'Enter your email' }).fill(config.userMemberAnsel);
   7 |     //await page.keyboard.type(email, { delay: 50 });
   8 |     //await page.getByRole('textbox', { name: 'Enter your email' }).type(config.userMemberAnsel, { delay: 50 });
   9 |     const emailInput = page.getByRole('textbox', { name: 'Enter your email' });
  10 |   
  11 |     // ðŸ‘‰ Now safely type with a delay
  12 |     await emailInput.type(config.userMemberAnsel, { delay: 10 });
  13 |     const passwordInput = page.locator('input[name="password"]');
  14 |     await passwordInput.type(config.passwordMemberAnsel, { delay: 10 });
  15 |     await page.getByRole('button', { name: 'Sign in' }).click();
  16 |     // âœ… Check the page title
  17 |   await expect(page).toHaveTitle(/Member Portal/);
  18 |
  19 |   // âœ… Check important text exists
> 20 |   await expect(page.getByRole('link', { name: 'Coverage' })).toBeVisible();
     |                                                              ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  21 |   await expect(page.getByRole('link', { name: 'Claims' })).toBeVisible();
  22 |   await expect(page.getByRole('link', { name: 'My info' })).toBeVisible();
  23 |   await expect(page.getByText('Effective 01/01/2025')).toBeVisible();
  24 |   await expect(page.getByText('Coverage packet')).toBeVisible();
  25 |
  26 |   // âœ… Check footer text
  27 |   await expect(page.getByText(/Â©2025 Ansel Health, Inc./)).toBeVisible();
  28 |
  29 |   // âœ… Check "File new claim" button
  30 |   const fileNewClaimBtn = page.getByRole('button', { name: 'File new claim' });
  31 |   await expect(fileNewClaimBtn).toBeVisible();
  32 |
  33 |   // âœ… Check background color of the "File new claim" button
  34 |   const backgroundColor = await fileNewClaimBtn.evaluate((el) => {
  35 |     return window.getComputedStyle(el).backgroundColor;
  36 |   });
  37 |   expect(backgroundColor).toBe('rgb(33, 133, 208)'); // Example: Playwright expects rgb, not hex
  38 |
  39 |   // âœ… Check coverage amounts
  40 |   await expect(page.getByText('$200')).toBeVisible();
  41 |   await expect(page.getByText('$500')).toBeVisible();
  42 |   await expect(page.getByText('$1,000')).toBeVisible();
  43 | });
```