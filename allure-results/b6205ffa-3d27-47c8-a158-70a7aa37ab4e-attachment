# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: test with dynamic Employer name and State
- Location: /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:23:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByRole('rowheader', { name: /Sauer - Schmidt \|/ })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByRole('rowheader', { name: /Sauer - Schmidt \|/ })

    at /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:109:26
```

# Test source

```ts
   9 |     await page.getByRole('textbox', { name: 'Password' }).fill(config.paswordSF);
   10 |    
   11 |     
   12 |     // usage:
   13 |     await page.getByRole('button', { name: config.loginButtonName }).click();
   14 |     await page.getByRole('button', { name: 'Search' }).fill('extracted company name');
   15 | }); */
   16 |
   17 | import { test, expect } from '@playwright/test';
   18 | import { faker } from '@faker-js/faker';
   19 | import createCSV from './utils/generate-csv'; // ‚úÖ make sure path is right
   20 | import { config } from './test.config'; // adjust the path if needed
   21 | import { format } from 'date-fns';
   22 |
   23 | test('test with dynamic Employer name and State', async ({ page }) => {
   24 |   test.setTimeout(120_000); // ‚è±Ô∏è Increase timeout to 2 minutes
   25 |
   26 |   // ‚úÖ Step 1: Generate CSV
   27 |   const csvPath = await createCSV(10);
   28 |   console.log(`üìÑ CSV created at: ${csvPath}`);
   29 |
   30 |   // ‚úÖ Step 2: Login
   31 |   await page.goto(config.urlPP);
   32 |   await page.getByRole('textbox', { name: 'Enter your email' }).fill(config.userNamePP);
   33 |   await page.locator('input[name="password"]').fill(config.passWord);
   34 |   await page.getByRole('button', { name: 'Login' }).click();
   35 |
   36 |   // ‚úÖ Step 3: Flow
   37 |   await page.getByRole('button', { name: 'Request a quote' }).click();
   38 |   await page.locator('label').filter({ hasText: 'damian test6360' }).click();
   39 |   await page.getByRole('button', { name: 'Next step' }).click();
   40 |   await page.getByRole('button', { name: '+ Add employer' }).click();
   41 |
   42 |   // üé≤ Generate dynamic values
   43 |   const allowedStates = ['Texas', 'California', 'Florida', 'Ohio', 'Georgia'];
   44 |   const randomCompanyName = faker.company.name();
   45 |   const randomCity = faker.location.city();
   46 |   const randomState = faker.helpers.arrayElement(allowedStates);
   47 |
   48 |   // üè¢ Fill Employer details
   49 |   await page.locator('input[name="companyName"]').fill(randomCompanyName);
   50 |   await page.locator('input[name="sicCode"]').fill('1');
   51 |   await page.getByText('- Rice').click();
   52 |   await page.locator('input[name="city"]').fill(randomCity);
   53 |   await page.getByRole('combobox').getByRole('textbox').fill(randomState);
   54 |   await page.getByRole('option', { name: randomState }).click();
   55 |   await page.locator('input[name="eligibleEmployees"]').fill('20');
   56 |   await page.getByRole('button', { name: 'Next step' }).click();
   57 |
   58 |   // üìÖ Date & Class
   59 |   await page.getByRole('listbox').filter({ hasText: 'May 1, 2025Jun 1, 2025Jul 1,' }).click();
   60 |   await page.getByRole('option', { name: 'Jun 1,' }).click();
   61 |   await page.getByRole('textbox', { name: 'Ex. All full-time employees' }).fill('Class A');
   62 |   await page.getByRole('button', { name: 'Next step' }).click();
   63 |
   64 |   // üìÅ CSV Upload
   65 |   await page.locator('input[type="file"]').setInputFiles(csvPath);
   66 |   await page.getByRole('button', { name: 'Next step' }).click();
   67 |
   68 |   // üîÑ Map BirthDate
   69 |   const listbox = page.getByRole('row', { name: /Date of birth/i }).getByRole('listbox');
   70 |   await listbox.click();
   71 |   for (let i = 0; i < 5; i++) {
   72 |     await page.keyboard.press('ArrowDown');
   73 |     await page.waitForTimeout(100);
   74 |   }
   75 |   await page.keyboard.press('Enter');
   76 |   await page.getByRole('button', { name: 'Next step' }).click();
   77 |   await page.getByRole('button', { name: 'Next step' }).click();
   78 |
   79 |   await page.getByText('Yes').click();
   80 |   await page.getByText('Accident').click();
   81 |   await page.getByText('Accident').click();
   82 |   await page.getByRole('button', { name: 'Next step' }).click();
   83 |
   84 |   // üì® Submit and send email
   85 |   await page.getByRole('button', { name: 'Submit' }).click();
   86 |   await page.getByRole('textbox', { name: 'Add another email address...' }).fill('igor.pejin+anselquotetest@joinansel.com');
   87 |   await page.getByRole('button', { name: 'Send' }).click();
   88 |
   89 |   // üîö Back to dashboard and go to underwriting
   90 |   await page.getByRole('button', { name: 'Back to quotes dashboard' }).click();
   91 |   await page.goto(config.urlUnderWriting);
   92 |
   93 |   // üîê Salesforce login
   94 |   await page.getByRole('textbox', { name: 'Username' }).fill(config.userNameSF);
   95 |   await page.getByRole('textbox', { name: 'Password' }).fill(config.paswordSF);
   96 |   await page.getByRole('button', { name: config.loginButtonName }).click();
   97 |
   98 |   // üîç Search for the created company
   99 |  /*  await page.getByRole('button', { name: 'Search' }).click();
  100 |   await page.getByRole('searchbox').fill(randomCompanyName);
  101 |
  102 |   await page.getByRole('rowheader', { name: 'Crist, Goldner and Carter |' }).getByRole('link') */
  103 |   // üí¨ You already searched for the company here:
  104 |   await page.getByRole('button', { name: 'Search' }).click();
  105 |   await page.getByRole('searchbox').fill(randomCompanyName);
  106 |   await page.waitForTimeout(2000);
  107 |   
  108 |   const quoteRow = page.getByRole('rowheader', { name: new RegExp(`${randomCompanyName} \\|`) });
> 109 |   await expect(quoteRow).toBeVisible();
      |                          ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  110 |   await quoteRow.getByRole('link').click();
  111 |   
  112 |   console.log(`‚úÖ Clicked quote row for: ${randomCompanyName}`);
  113 | await page.getByTitle('Approved').click();
  114 | await page.locator('button').filter({ hasText: 'Mark as Current Status' }).click();
  115 | await page.waitForTimeout(4000);
  116 | await page.getByTitle('Issued').click();
  117 |
  118 | await page.locator('button').filter({ hasText: 'Mark as Current Status' }).click();
  119 | await page.waitForTimeout(5000);
  120 |
  121 | /* await page.getByRole('tab', { name: 'Details' }).click();
  122 | await page.getByRole('link', { name: 'https://qa-ansel-platform.' }).click(); */
  123 |
  124 | await page.getByRole('tab', { name: 'Details' }).click();
  125 | await page.waitForTimeout(500);
  126 |
  127 | // ‚úÖ Step 2: Get the Proposal Link (partially matching the visible URL text)
  128 | const proposalLink = page.getByRole('link', { name: /https:\/\/qa-ansel-platform/ });
  129 |
  130 | // ‚úÖ Step 3: Scroll to it (in case it's out of viewport)
  131 | await proposalLink.scrollIntoViewIfNeeded();
  132 |
  133 | // ‚úÖ Step 4: Click the link
  134 | await proposalLink.click();
  135 |
  136 | /* await page.getByText('Yes, I accept this proposal').click();
  137 |   await page.locator('input[name="contactFirstName"]').fill('Igor');
  138 |   await page.locator('input[name="contactLastName"]').fill('Pejin');
  139 |   await page.locator('input[name="contactEmail"]').fill('igor.pejin+anselquotetest@joinansel.com');
  140 |   await page.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill('1234567890');
  141 |
  142 | await page.getByText('Ansel enrollment platform').click();
  143 | await page.getByText('Ansel enrollment platform').click();
  144 | await page.getByText('Ansel enrollment platform').click();
  145 |
  146 | await page.getByText('Ansel enrollment platform').fill('Ansel enrollment platform');
  147 | await page.locator('input[name="ackLastName"]').fill('Pejin');
  148 | await page.locator('input[name="ackEmail"]').fill('igor.pejin+anselquotetest@joinansel.com');
  149 | await page.getByText('By checking this box, I agree').click(); */
  150 |
  151 |
  152 | // Generate dynamic values
  153 | const firstName = faker.person.firstName();
  154 | const lastName = faker.person.lastName();
  155 | const randomEmail = `igor.pejin+${faker.string.alphanumeric(8)}@joinansel.com`;
  156 |
  157 | const ackFirstName = faker.person.firstName();
  158 | const ackLastName = faker.person.lastName();
  159 | const ackEmail = `igor.pejin+${faker.string.alphanumeric(8)}@joinansel.com`;
  160 |
  161 | // üìÖ Date logic
  162 | const today = format(new Date(), 'MM/dd/yyyy');
  163 | const threeWeeksLater = format(new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), 'MM/dd/yyyy');
  164 |
  165 | // Fill in the main form
  166 | await page.getByText('Yes, I accept this proposal').click();
  167 |
  168 | await page.locator('input[name="contactFirstName"]').fill(firstName);
  169 | await page.locator('input[name="contactLastName"]').fill(lastName);
  170 | await page.locator('input[name="contactEmail"]').fill(randomEmail);
  171 | await page.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill('1234567890');
  172 |
  173 | // Platform selection (if it's a dropdown or toggle, adjust as needed)
  174 | await page.getByText('Ansel enrollment platform').click();
  175 |
  176 | // Fill in dates (adjust the selectors if needed)
  177 | await page.locator('input[name="startDate"]').fill(today);
  178 | await page.locator('input[name="endDate"]').fill(threeWeeksLater);
  179 |
  180 | // Acknowledgement section
  181 | await page.locator('input[name="ackFirstName"]').fill(ackFirstName);
  182 | await page.locator('input[name="ackLastName"]').fill(ackLastName);
  183 | await page.locator('input[name="ackEmail"]').fill(ackEmail);
  184 |
  185 | await page.getByText('By checking this box, I agree').click();
  186 |
  187 |
  188 | });
```