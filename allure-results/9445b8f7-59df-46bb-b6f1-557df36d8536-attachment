# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping only Primary
- Location: /Users/pejin/Documents/Playwright new/tests/symetra_shopping/symetra_spouse.spec.ts:4:5

# Error details

```
Error: locator.click: Test timeout of 120000ms exceeded.
Call log:
  - waiting for getByText('My spouse and me')

    at /Users/pejin/Documents/Playwright new/tests/symetra_shopping/symetra_spouse.spec.ts:113:45
```

# Test source

```ts
   13 |
   14 |   await page.getByRole('tab', { name: 'Related' }).click();
   15 |   console.log('📂 Opened Related tab');
   16 |
   17 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 60);
   18 |
   19 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   20 |   await page.waitForTimeout(2000);
   21 |   await csLink.click();
   22 |   console.log('🔗 Clicked CS- link');
   23 |
   24 |   await page.waitForTimeout(1000);
   25 |   await page.getByRole('tab', { name: 'Related' }).click();
   26 |   await page.waitForTimeout(1000);
   27 | // Wait until the link is visible and stable before clicking
   28 | await page.getByRole('link', { name: /^Prospectives/ }).click();
   29 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   30 |   await firstNameLink.click({ force: true });
   31 |   console.log('✅ Opened first prospective record');
   32 |
   33 |   await page.waitForTimeout(1000);
   34 |   await page.getByRole('tab', { name: 'Details' }).click();
   35 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
   36 |
   37 |   // Extract SSN
   38 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
   39 |   const ssn = await ssnElement.innerText();
   40 |   console.log(`🔐 Extracted SSN: ${ssn}`);
   41 |
   42 |   // Extract and format DOB
   43 |   const dobElement = page.locator('lightning-formatted-text')
   44 |     .locator('xpath=../../..')
   45 |     .filter({ hasText: 'Date of Birth' })
   46 |     .locator('lightning-formatted-text');
   47 |
   48 |   const dobRaw = await dobElement.innerText();
   49 |   let [month, day, year] = dobRaw.split('/');
   50 |   month = month.padStart(2, '0');
   51 |   day = day.padStart(2, '0');
   52 |   const dob = `${month}/${day}/${year}`;
   53 |   console.log(`🎂 Extracted and formatted DOB: ${dob}`);
   54 |
   55 |   // Click Get The Link
   56 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   57 |   console.log('🎯 Clicked "Get The Link"');
   58 |
   59 |   const validTextarea = page.locator('textarea').filter({ hasText: /^https:\/\/.+/ }).first();
   60 |   await expect(validTextarea).toBeVisible({ timeout: 10000 });
   61 |
   62 |   const shoppingLink = await validTextarea.inputValue();
   63 |   console.log(`🔗 Extracted shopping link`);
   64 |
   65 |   // Open in a new tab (ensures fresh state and skips remembering old flow)
   66 |   const newPage = await context.newPage();
   67 |   await newPage.goto(shoppingLink, { waitUntil: 'domcontentloaded' });
   68 |   console.log('🆕 Navigated to shopping link in new tab');
   69 |
   70 |   // Proceed with verify step
   71 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   72 |   console.log('🔐 Verification started');
   73 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
   74 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
   75 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   76 |   console.log('🔓 Verification passed');
   77 |
   78 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   79 |
   80 |   // ✅ Ensure fresh continuation from the correct start page
   81 |
   82 |    // Select "No" for married, and "I'm not a parent"
   83 |    await newPage.getByText('Yes', { exact: true }).click();
   84 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 60);
   85 |
   86 |   await newPage.getByText('I\'m not a parent').click();
   87 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   88 |   console.log('👪 Household questions');
   89 |
   90 |   // ⏭ Continue steps
   91 |   for (let i = 1; i <= 8; i++) {
   92 |     await newPage.getByRole('button', { name: 'Next step' }).click();
   93 |     console.log(`➡️ Page ${i + 2} complete`);
   94 |   }
   95 |    // Let's talk about medical expenses
   96 |   await newPage.getByText('Yes').click();
   97 |   await newPage.getByText('I typically pay the full cost').click();
   98 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   99 |   console.log('💰 Medical expenses questions');
  100 |
  101 |   // We'll keep your budget in mind
  102 |   await newPage.getByText('I can purchase what I want').click();
  103 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  104 |     console.log('✅ Purchasing what I want');
  105 |
  106 |
  107 | // Select Ansel benefits
  108 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  109 |
  110 |     await newPage.getByRole('button', { name: 'Next step' }).click();
  111 |     await newPage.waitForTimeout(2000);
  112 |
> 113 | await newPage.getByText('My spouse and me').click({ force: true });
      |                                             ^ Error: locator.click: Test timeout of 120000ms exceeded.
  114 |
  115 | console.log('✅ Select ansel benefits');
  116 | await newPage.waitForTimeout(1000);
  117 |
  118 |
  119 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  120 |   await newPage.waitForTimeout(1000);
  121 |
  122 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  123 |
  124 |   
  125 |   for (let i = 0; i < 10; i++) {
  126 |     await page.mouse.wheel(0, 400);
  127 |     await page.waitForTimeout(100);
  128 |   }
  129 |   await newPage.waitForTimeout(2000);
  130 |   await newPage.getByRole('listbox').filter({ hasText: 'FemaleMale' }).click();
  131 |
  132 |   await newPage.waitForTimeout(1000);
  133 |
  134 | // Generate a random 9-digit phone number
  135 | const random9Digits = Math.floor(100000000 + Math.random() * 900000000);
  136 |
  137 | // Format it properly like (XXX) XXX-XXXX
  138 | const formattedPhone = `(${String(random9Digits).slice(0, 3)}) ${String(random9Digits).slice(3, 6)}-${String(random9Digits).slice(6)}`;
  139 |
  140 | await newPage.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).type(formattedPhone, { delay: 100 });
  141 | console.log(`📱 Filled formatted phone number: ${formattedPhone}`);  
  142 | await newPage.waitForTimeout(1000);
  143 |
  144 | await newPage.getByRole('listbox').filter({ hasText: 'MobileStandard' }).click();
  145 |   await newPage.locator('input[name="SET_STREET_ADDRESS"]').fill('123 Main St');
  146 |   await newPage.waitForTimeout(1000);
  147 |
  148 |   await newPage.locator('input[name="SET_ZIP_CODE"]').fill('12345');
  149 |   await newPage.locator('input[name="SET_CITY"]').fill('Random City');
  150 |
  151 |
  152 | // Add spouse
  153 | await newPage.getByRole('button', { name: '+ Add dependent' }).click();
  154 | await newPage.getByRole('listbox').filter({ hasText: 'SpouseChildDomestic' }).click();
  155 | // Then select the 'Spouse' option
  156 | await newPage.getByRole('option', { name: 'Spouse' }).click();
  157 | await newPage.waitForTimeout(1000);
  158 |
  159 | await newPage.locator('input[name="firstName"]').fill('Jane');
  160 | await newPage.locator('input[name="lastName"]').fill('Doe');
  161 | // Open the gender dropdown
  162 | await newPage.waitForTimeout(1000);
  163 | await newPage.getByRole('listbox').filter({ hasText: /^FemaleMale$/ }).click();
  164 |
  165 | // Wait for the options to become visible
  166 |
  167 | // Pick a random gender
  168 | const gender = Math.random() > 0.5 ? 'Male' : 'Female';
  169 |
  170 | // Select the gender option
  171 | await newPage.getByRole('option', { name: gender }).click();
  172 |
  173 | console.log(`✅ Selected gender: ${gender}`);
  174 | // Wait for the options to become visible
  175 | //await newPage.waitForSelector('[role="option"]'); // This ensures options are ready
  176 |
  177 | // Pick a random gender
  178 |
  179 |
  180 | // Select date of birth
  181 | await newPage.locator('input[name="birthdate"]').fill('01/01/2004');
  182 |
  183 | // SSN
  184 | // Helper to generate random SSN
  185 | function generateRandomSSN() {
  186 |   const part1 = Math.floor(100 + Math.random() * 900); // 3 digits
  187 |   const part2 = Math.floor(10 + Math.random() * 90);   // 2 digits
  188 |   const part3 = Math.floor(1000 + Math.random() * 9000); // 4 digits
  189 |   return `${part1}-${part2}-${part3}`;
  190 | }
  191 |
  192 | // Then fill it
  193 | const randomSSN = generateRandomSSN();
  194 |
  195 |
  196 | await newPage.getByRole('button', { name: 'Save' }).click();
  197 |
  198 | await newPage.getByRole('button', { name: 'Next step' }).click();
  199 | console.log('📬 Contact info filled');
  200 |
  201 |
  202 |   
  203 |
  204 |   await newPage.locator('input[name="password"]').fill('Demo123456');
  205 |   await newPage.locator('input[name="confirmPassword"]').fill('Demo123456');
  206 |   await newPage.evaluate(() => {
  207 |     const cb = document.querySelector('input[name="agreeToTerms"]');
  208 |     if (cb) cb.removeAttribute('readonly');
  209 |     (cb as HTMLInputElement)?.click();
  210 |   });
  211 |
  212 |
  213 |   // Done!
```