# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: test
- Location: /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:3:5

# Error details

```
Error: expect(page).toHaveScreenshot(expected)

  483681 pixels (ratio 0.53 of all image pixels) are different.

Expected: /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts-snapshots/test-2-chromium-darwin.png
Received: /Users/pejin/Documents/Playwright QA/test-results/test-30-test-chromium/test-2-actual.png
    Diff: /Users/pejin/Documents/Playwright QA/test-results/test-30-test-chromium/test-2-diff.png

Call log:
  - expect.toHaveScreenshot with timeout 5000ms
    - verifying given screenshot expectation
  - taking page screenshot
    - disabled all CSS animations
  - waiting for fonts to load...
  - fonts loaded
  - 483681 pixels (ratio 0.53 of all image pixels) are different.
  - waiting 100ms before taking screenshot
  - taking page screenshot
    - disabled all CSS animations
  - waiting for fonts to load...
  - fonts loaded
  - captured a stable screenshot
  - 483681 pixels (ratio 0.53 of all image pixels) are different.

    at /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:38:22
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('test', async ({ page }) => {
   4 |   await page.goto('https://playwright.dev/');
   5 |  await page.pause();
   6 |   const myText = await page.getByRole('heading', { name: 'Playwright enables reliable' }).locator('span');
   7 |   const color = await myText.evaluate(el => getComputedStyle(el).color);
   8 |   console.log('ðŸŽ¨ Color:', color);
   9 |   const hex = color.replace(/[^\d,]/g, '')  // remove non-digits and non-commas
  10 |     .split(',')                             // split into R, G, B
  11 |     .slice(0, 3)                            // just take RGB (ignore alpha)
  12 |     .map(x => (+x).toString(16).padStart(2, '0'))  // convert to hex
  13 |     .join('')
  14 |     .toUpperCase();
  15 |
  16 |   console.log('ðŸ”· HEX:', `#${hex}`);
  17 |
  18 |   const mytext2 = await page.getByRole('link', { name: 'TypeScript' });
  19 |   const color2 = await mytext2.evaluate(el => getComputedStyle(el).color);
  20 |   console.log('ðŸŽ¨ Color:', color2);
  21 |   const hex2 = color2.replace(/[^\d,]/g, '')  // remove non-digits and non-commas
  22 |     .split(',')                             // split into R, G, B
  23 |     .slice(0, 3)                            // just take RGB (ignore alpha)
  24 |     .map(x => (+x).toString(16).padStart(2, '0'))  // convert to hex
  25 |     .join('')
  26 |     .toUpperCase();
  27 |
  28 |   console.log('ðŸ”· HEX:', `#${hex2}`);
  29 |   await expect(page).toHaveScreenshot();
  30 |
  31 |   await page.getByRole('button', { name: 'Search' }).click();
  32 |   //await page.getByPlaceholder('DocSearch-Button-Placeholder').click();
  33 |   await page.getByRole('searchbox').click();
  34 |   await page.getByRole('searchbox').fill('playwright');
  35 |
  36 |   await page.waitForTimeout(1000);
  37 |   await page.getByRole('button', { name: 'Clear the query' }).click();
> 38 |   await expect(page).toHaveScreenshot();
     |                      ^ Error: expect(page).toHaveScreenshot(expected)
  39 |
  40 |   await page.getByRole('button', { name: 'Search', exact: true }).click();
  41 |   await expect(page).toHaveScreenshot();
  42 |
  43 |   await page.getByRole('button', { name: 'Search' }).click();
  44 |   await page.getByRole('searchbox').fill('playwright test');  // works
  45 |   //await page.locator('#docsearch-input').fill('playwright testing');  // works
  46 |   //await page.locator('input[type="search"]').fill('playwright testing');  // works
  47 |   //await page.locator('xpath=//input[@type="search"]').fill('playwright demo');  // works
  48 |   await page.getByRole('button', { name: 'Clear the query' }).click();
  49 |   await page.getByRole('button', { name: 'Search', exact: true }).click();
  50 |   await page.locator('text = Get started').click();
  51 |      //await page.locator('text= How to install Playwright').click();
  52 |
  53 | });
```