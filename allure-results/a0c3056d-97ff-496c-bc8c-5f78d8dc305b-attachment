# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: test
- Location: /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:3:5

# Error details

```
Error: locator.click: Test ended.
Call log:
  - waiting for getByRole('tab', { name: 'Details' })

    at /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:39:52
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('test', async ({ page }) => {
   4 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   5 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   6 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   7 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   8 |
   9 |   console.log('🧭 Logged in and navigating to Contract page');
  10 |
  11 |   // Click Related tab
  12 |   await page.getByRole('tab', { name: 'Related' }).click();
  13 |   console.log('📂 Opened Related tab');
  14 |
  15 |   // Manually scroll the page to the bottom (or a large Y value)
  16 |   for (let i = 0; i < 10; i++) {
  17 |     await page.mouse.wheel(0, 30);
  18 |   }
  19 |
  20 |   // Click the CS- link
  21 |   const csLink = page.getByRole('link', { name: /^CS-/ });
  22 |   await csLink.click();
  23 |   console.log('🔗 Clicked CS- link');
  24 |
  25 |   // Wait and click Related tab again
  26 |   await page.waitForTimeout(1000);
  27 |   await page.getByRole('tab', { name: 'Related' }).click();
  28 |
  29 |   
  30 |   // Scroll down again
  31 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
  32 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
  33 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
  34 |
  35 | await firstNameLink.click({ force: true });
  36 |
  37 | console.log('✅ Clicked on the first name link in the list');
  38 | await page.waitForTimeout(1000);
> 39 |   await page.getByRole('tab', { name: 'Details' }).click();
     |                                                    ^ Error: locator.click: Test ended.
  40 |   for (let i = 0; i < 10; i++) {
  41 |     await page.mouse.wheel(0, 70);
  42 |   }
  43 |   // 🧠 Extract SSN and DOB
  44 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ });
  45 |   const dobElement = page.locator('lightning-formatted-text').filter({ hasText: /\d{1,2}\/\d{1,2}\/\d{4}/ });
  46 |
  47 |   const ssn = await ssnElement.innerText();
  48 |   const dob = await dobElement.innerText();
  49 |
  50 |   console.log(`🔐 Extracted SSN: ${ssn}`);
  51 |   console.log(`🎂 Extracted DOB: ${dob}`);
  52 |
  53 |   // 💡 Save for future use if needed
  54 |   // You can export to a file, store in global, or reuse in a second test
  55 |
  56 |   // ⚡ Click "Get The Link"
  57 |   await page.getByRole('button', { name: 'Get The Link' }).click();
  58 |   console.log('🧭 Clicked "Get The Link"');
  59 |
  60 |   // 🧾 Grab the generated URL
  61 |   const textArea = page.locator('textarea');
  62 |   await expect(async () => {
  63 |     const value = await textArea.inputValue();
  64 |     expect(value).toMatch(/^https:\/\/.+/);
  65 |   }).toPass({ timeout: 10000 });
  66 |
  67 |   const link = await textArea.inputValue();
  68 |   console.log(`🔗 Standalone link extracted: ${link}`);
  69 |
  70 |   // 🌐 Open the standalone link
  71 |   await page.goto(link, { waitUntil: 'domcontentloaded' });
  72 |   console.log('🚀 Navigated to standalone enrollment link');
  73 | });
```