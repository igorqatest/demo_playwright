# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Upload generated CSV on census page
- Location: /Users/pejin/Documents/Playwright QA/tests/test-28.spec.ts:4:5

# Error details

```
Error: locator.click: Test ended.
Call log:
  - waiting for getByRole('listbox').getByText('May 1, 2025')
    - locator resolved to <span class="text">May 1, 2025</span>
  - attempting click action
    2 √ó waiting for element to be visible, enabled and stable
      - element is not visible
    - retrying click action
    - waiting 20ms
    2 √ó waiting for element to be visible, enabled and stable
      - element is not visible
    - retrying click action
      - waiting 100ms
    21 √ó waiting for element to be visible, enabled and stable
       - element is not visible
     - retrying click action
       - waiting 500ms

    at /Users/pejin/Documents/Playwright QA/tests/test-28.spec.ts:26:60
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import createCSV from './utils/generate-csv'; // adjust path to your generator!
   3 |
   4 | test('Upload generated CSV on census page', async ({ page }) => {
   5 |   // üîπ Generate a CSV file dynamically
   6 |   const csvFilePath = await createCSV(10); // generate 10 fake rows
   7 |
   8 |   // üåê Login and navigate to upload page
   9 |   await page.goto('https://qa-ansel-platform.joinansel.com/partner/login');
  10 |   await page.getByRole('textbox', { name: 'Enter your email' }).fill('damianp+damianp@joinansel.com');
  11 |   await page.locator('input[name="password"]').fill('Demo123456');
  12 |   await page.getByRole('button', { name: 'Login' }).click();
  13 |
  14 |   await page.getByRole('button', { name: 'Request a quote' }).click();
  15 |   await page.locator('label').filter({ hasText: 'damian test6360' }).click();
  16 |   await page.getByRole('button', { name: 'Next step' }).click();
  17 |   await page.getByRole('button', { name: '+ Add employer' }).click();
  18 |   await page.locator('input[name="companyName"]').fill('ER test');
  19 |   await page.locator('input[name="sicCode"]').fill('1');
  20 |   await page.getByText('- Rice').click();
  21 |   await page.locator('input[name="city"]').fill('Dallas');
  22 |   await page.getByRole('combobox').getByRole('textbox').fill('Texas');
  23 |   await page.getByRole('option', { name: 'Texas' }).click();
  24 |   await page.locator('input[name="eligibleEmployees"]').fill('20');
  25 |   await page.getByRole('button', { name: 'Next step' }).click();
> 26 |   await page.getByRole('listbox').getByText('May 1, 2025').click();
     |                                                            ^ Error: locator.click: Test ended.
  27 |   await page.getByRole('option', { name: 'Jun 1,' }).click();
  28 |   await page.getByRole('textbox', { name: 'Ex. All full-time employees' }).fill('Class A');
  29 |   await page.getByRole('button', { name: 'Next step' }).click();
  30 |
  31 |   // üîΩ This gets us to the upload screen
  32 |   await page.getByText('Drag and drop your census').click();
  33 |
  34 |   // üîç Upload CSV using hidden file input
  35 |   const fileInput = await page.locator('input[type="file"]');
  36 |   await fileInput.setInputFiles(csvFilePath); // üéØ actual upload!
  37 |
  38 |   // ‚úÖ (Optional) wait for upload to complete or for confirmation text
  39 |   await expect(page.locator('text=Upload complete')).toBeVisible(); // adjust this text if needed
  40 | });
```