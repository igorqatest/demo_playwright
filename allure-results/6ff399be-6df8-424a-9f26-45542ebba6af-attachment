# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Extract SSN/DOB and open enrollment link
- Location: /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:60:5

# Error details

```
Error: locator.innerText: Test ended.
Call log:
  - waiting for locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ })

    at /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:97:32
```

# Test source

```ts
   1 | /* import { test, expect } from '@playwright/test';
   2 |
   3 | test('test', async ({ page }) => {
   4 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   5 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   6 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   7 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   8 |
   9 |   console.log('🧭 Logged in and navigating to Contract page');
   10 |
   11 |   // Click Related tab
   12 |   await page.getByRole('tab', { name: 'Related' }).click();
   13 |   console.log('📂 Opened Related tab');
   14 |
   15 |   // Manually scroll the page to the bottom (or a large Y value)
   16 |   for (let i = 0; i < 10; i++) {
   17 |     await page.mouse.wheel(0, 30);
   18 |   }
   19 |
   20 |   // Click the CS- link
   21 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   22 |   await csLink.click();
   23 |   console.log('🔗 Clicked CS- link');
   24 |
   25 |   // Wait and click Related tab again
   26 |   await page.waitForTimeout(1000);
   27 |   await page.getByRole('tab', { name: 'Related' }).click();
   28 |
   29 |   
   30 |   // Scroll down again
   31 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
   32 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
   33 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   34 |
   35 | await firstNameLink.click({ force: true });
   36 |
   37 | console.log('✅ Clicked on the first name link in the list');
   38 |   await page.getByRole('tab', { name: 'Details' }).click();
   39 |   await page.locator('lightning-formatted-text').filter({ hasText: '692-74-5197' })
   40 |   await page.locator('lightning-formatted-text').filter({ hasText: '4/8/1984' })
   41 |
   42 |   console.log('🧭 Navigating to contract page and clicking "Get The Link"...');
   43 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   44 |
   45 |   const textArea = page.locator('textarea');
   46 |   await expect(async () => {
   47 |     const value = await textArea.inputValue();
   48 |     expect(value).toMatch(/^https:\/\/.+/);
   49 |   }).toPass({ timeout: 10000 });
   50 |
   51 |   const link = await textArea.inputValue();
   52 |   console.log(`✅ Shopping link extracted: ${link}`);
   53 |
   54 |   console.log('🌐 Opening shopping link...');
   55 |   await page.goto(link, { waitUntil: 'domcontentloaded' });
   56 | }); */
   57 |
   58 | import { test, expect } from '@playwright/test';
   59 |
   60 | test('Extract SSN/DOB and open enrollment link', async ({ page }) => {
   61 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   62 |
   63 |   // 🔐 Login
   64 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   65 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   66 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   67 |   console.log('🧭 Logged in and navigating to Contract page');
   68 |
   69 |   // 🧩 Navigate to Prospectives
   70 |   await page.getByRole('tab', { name: 'Related' }).click();
   71 |   console.log('📂 Opened Related tab');
   72 |
   73 |   for (let i = 0; i < 10; i++) {
   74 |     await page.mouse.wheel(0, 30);
   75 |   }
   76 |
   77 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   78 |   await csLink.click();
   79 |   console.log('🔗 Clicked CS- link');
   80 |
   81 |   await page.waitForTimeout(1000);
   82 |   await page.getByRole('tab', { name: 'Related' }).click();
   83 |
   84 |   // Click first name in Prospectives list
   85 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   86 |   await firstNameLink.waitFor({ state: 'visible', timeout: 5000 });
   87 |   await firstNameLink.click({ force: true });
   88 |   console.log('✅ Clicked first prospect name');
   89 |
   90 |   // 🧾 Go to Details tab
   91 |   await page.getByRole('tab', { name: 'Details' }).click();
   92 |
   93 |   // 🧠 Extract SSN and DOB
   94 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ });
   95 |   const dobElement = page.locator('lightning-formatted-text').filter({ hasText: /\d{1,2}\/\d{1,2}\/\d{4}/ });
   96 |
>  97 |   const ssn = await ssnElement.innerText();
      |                                ^ Error: locator.innerText: Test ended.
   98 |   const dob = await dobElement.innerText();
   99 |
  100 |   console.log(`🔐 Extracted SSN: ${ssn}`);
  101 |   console.log(`🎂 Extracted DOB: ${dob}`);
  102 |
  103 |   // 💡 Save for future use if needed
  104 |   // You can export to a file, store in global, or reuse in a second test
  105 |
  106 |   // ⚡ Click "Get The Link"
  107 |   await page.getByRole('button', { name: 'Get The Link' }).click();
  108 |   console.log('🧭 Clicked "Get The Link"');
  109 |
  110 |   // 🧾 Grab the generated URL
  111 |   const textArea = page.locator('textarea');
  112 |   await expect(async () => {
  113 |     const value = await textArea.inputValue();
  114 |     expect(value).toMatch(/^https:\/\/.+/);
  115 |   }).toPass({ timeout: 10000 });
  116 |
  117 |   const link = await textArea.inputValue();
  118 |   console.log(`🔗 Standalone link extracted: ${link}`);
  119 |
  120 |   // 🌐 Open the standalone link
  121 |   await page.goto(link, { waitUntil: 'domcontentloaded' });
  122 |   console.log('🚀 Navigated to standalone enrollment link');
  123 | });
```