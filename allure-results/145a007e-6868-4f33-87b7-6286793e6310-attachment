# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: My first test
- Location: /Users/pejin/Documents/Playwright new/tests/claim_ansel.spec.ts:4:5

# Error details

```
Error: expect(locator).toBeVisible()

Locator: getByRole('button', { name: 'All done' })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 10000ms
  - waiting for getByRole('button', { name: 'All done' })

    at /Users/pejin/Documents/Playwright new/tests/claim_ansel.spec.ts:74:34
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { config } from './reusable.ts';
   3 |
   4 | test('My first test', async ({ page }) => {
   5 |   console.log('✅ Navigating to Member Portal...');
   6 |   await page.goto(config.urlMemberAnsel, { waitUntil: 'domcontentloaded' });
   7 |
   8 |   console.log('✅ Filling in Login form...');
   9 |   const emailInput = page.getByRole('textbox', { name: 'Enter your email' });
  10 |   await emailInput.type(config.userMemberAnsel, { delay: 10 });
  11 |
  12 |   const passwordInput = page.locator('input[name="password"]');
  13 |   await passwordInput.type(config.passwordMemberAnsel, { delay: 10 });
  14 |
  15 |   await page.getByRole('button', { name: 'Sign in' }).click();
  16 |
  17 |   console.log('✅ Waiting for Dashboard to load...');
  18 |   await page.waitForTimeout(15000); // Adjust the timeout as needed
  19 |
  20 |   await page.getByRole('button', { name: 'File new claim' }).click();
  21 |   await page.getByRole('button', { name: 'Next step' }).click();
  22 |
  23 |   await page.locator('textarea[name="symptoms"]').fill('test');
  24 |   await page.locator('textarea[name="providerDiagnosis"]').fill('test');
  25 |   await page.locator('textarea[name="treatment"]').fill('test');
  26 |   await page.locator('textarea[name="additionalInfo"]').fill('test');
  27 |   await page.waitForTimeout(1000);
  28 |   await page.getByRole('button', { name: 'Next step' }).click();
  29 |
  30 |
  31 |   await page.getByText('Emergency room').click();
  32 |   for (let i = 0; i < 10; i++) {
  33 |     await page.mouse.wheel(0, 200);
  34 |     await page.waitForTimeout(100);
  35 |   }
  36 | // 1. Type into the hospital field
  37 | await page.locator('input.prompt').fill('Hospital');
  38 |
  39 | // 2. Wait for the suggestions to appear
  40 | await page.waitForSelector('.results.visible .result');
  41 |
  42 | // 3. Click the first suggestion
  43 | await page.locator('.results.visible .result').first().click();
  44 |
  45 | console.log('✅ Successfully clicked the first hospital!');
  46 | //Tell us where you were treated
  47 | await page.getByRole('button', { name: 'Next step' }).click();
  48 | //Let´s prepare your documents
  49 | await page.getByRole('button', { name: 'Next step' }).click();
  50 | // Upload your pictures
  51 | await page.getByRole('button', { name: 'Next step' }).click();
  52 | // Confirm uploads
  53 | await page.getByRole('button', { name: 'Next step' }).click();
  54 | // Payment preference
  55 | await page.getByRole('button', { name: '+Add payment method' }).click();
  56 | await page.getByRole('row', { name: 'PayPal payout method Configure' }).getByRole('button').click();
  57 | await page.locator('input[name="username"]').fill('igor.pejin+anselquotetest@joinansel.com');
  58 | await page.locator('input[name="confirmUsername"]').fill('igor.pejin+anselquotetest@joinansel.com');
  59 | await page.getByRole('button', { name: 'Submit' }).click();
  60 | await page.waitForTimeout(4000);
  61 | await page.getByRole('button', { name: 'Next step' }).click();
  62 |
  63 | for (let i = 0; i < 10; i++) {
  64 |     await page.mouse.wheel(0, 400);
  65 |     await page.waitForTimeout(100);
  66 |   }
  67 |  await page.locator('label').first().click();
  68 |  await page.getByRole('button', { name: 'Submit' }).click();
  69 |
  70 |  // After Submit, reselect fresh
  71 | await page.waitForLoadState('networkidle'); // or 'domcontentloaded'
  72 | const freshAllDoneButton = page.getByRole('button', { name: 'All done' });
  73 |
> 74 | await expect(freshAllDoneButton).toBeVisible({ timeout: 10000 });
     |                                  ^ Error: expect(locator).toBeVisible()
  75 | await freshAllDoneButton.click();
  76 |
  77 |
  78 | });
```