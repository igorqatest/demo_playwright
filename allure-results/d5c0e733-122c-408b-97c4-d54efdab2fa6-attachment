# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Generate and follow Implementation Link
- Location: /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:3:5

# Error details

```
Error: page.goto: net::ERR_ABORTED at https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view
Call log:
  - navigating to "https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view", waiting until "load"

    at /Users/pejin/Documents/Playwright QA/tests/test-30.spec.ts:12:14
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Generate and follow Implementation Link', async ({ page }) => {
   4 |   // 1. Go to Salesforce login and login
   5 |   await page.goto('https://brella--qa.sandbox.my.salesforce.com/?ec=302&startURL=%2Fvisualforce%2Fsession%3Furl%3Dhttps%253A%252F%252Fbrella--qa.sandbox.lightning.force.com%252Flightning%252Fr%252FContract%252F800QL00000JP9MvYAL%252Fview');
   6 |
   7 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   8 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   9 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
  10 |
  11 |   // 2. Navigate directly to Contract page after login
> 12 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
     |              ^ Error: page.goto: net::ERR_ABORTED at https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view
  13 |
  14 |   // 3. Click "Get The Link"
  15 |   await page.getByRole('button', { name: 'Get The Link' }).click();
  16 |   console.log('ðŸ”˜ Clicked "Get The Link"');
  17 |
  18 |   // 4. Wait for textarea to populate with a valid link
  19 |   const textArea = page.locator('textarea');
  20 |
  21 |   await expect(async () => {
  22 |     const value = await textArea.inputValue();
  23 |     expect(value).toMatch(/^https:\/\/.+/); // HTTPS validation
  24 |   }).toPass({ timeout: 10000 });
  25 |
  26 |   // 5. Extract the link
  27 |   const link = await textArea.inputValue();
  28 |   console.log(`âœ… Implementation link found: ${link}`);
  29 |
  30 |   // 6. Go to the generated link
  31 |   await page.goto(link, { waitUntil: 'domcontentloaded' });
  32 |   console.log(`ðŸš€ Navigated to: ${link}`);
  33 | });
```