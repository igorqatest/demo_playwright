# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: My first test
- Location: /Users/pejin/Documents/Playwright new/tests/member_ansel.spec.ts:4:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: "Note: This is a summary of the important features of your coverage. This is not the insurance contract. Please refer to your certificate below for all details including the rights and obligations of both you and Ansel."
Received: {"_frame": {"_guid": "frame@3dbd3667e3f8ccd8a830a8ed84cfadaf", "_type": "Frame"}, "_selector": "internal:text=\"Note: This is a summary of\"i", Symbol(nodejs.util.inspect.custom): [Function anonymous]}
    at /Users/pejin/Documents/Playwright new/tests/member_ansel.spec.ts:23:19
```

# Test source

```ts
   1 |  import {test, expect} from '@playwright/test';
   2 | import {config} from './reusable.ts';
   3 |
   4 | test('My first test', async ({ page }) => {
   5 |     await page.goto(config.urlMemberAnsel, { waitUntil: 'domcontentloaded' });
   6 |     
   7 |     const emailInput = page.getByRole('textbox', { name: 'Enter your email' });
   8 |   
   9 |     // ðŸ‘‰ Now safely type with a delay
  10 |     await emailInput.type(config.userMemberAnsel, { delay: 10 });
  11 |     const passwordInput = page.locator('input[name="password"]');
  12 |     await passwordInput.type(config.passwordMemberAnsel, { delay: 10 });
  13 |     await page.getByRole('button', { name: 'Sign in' }).click();
  14 |     // âœ… Check the page title
  15 |   await expect(page).toHaveTitle(/Member Portal/);
  16 |   await page.waitForTimeout(15000);
  17 |   // âœ… Check important text exists
  18 |   await expect(page.getByRole('heading', { name: 'Coverage' })).toBeVisible();
  19 |
  20 |   //await expect(page.getByText('Note: This is a summary of')).toBeVisible();
  21 |   const paragraph = page.getByText('Note: This is a summary of', { exact: false });
  22 |
> 23 | expect(paragraph).toBe(
     |                   ^ Error: expect(received).toBe(expected) // Object.is equality
  24 |   "Note: This is a summary of the important features of your coverage. This is not the insurance contract. Please refer to your certificate below for all details including the rights and obligations of both you and Ansel."
  25 | );
  26 |   // --- Header ---
  27 |   await expect(page.getByRole('link', { name: 'Coverage' })).toBeVisible();
  28 |   await expect(page.getByRole('link', { name: 'Claims' })).toBeVisible();
  29 |   await expect(page.getByRole('link', { name: 'My info' })).toBeVisible();
  30 |
  31 |   await expect(page.getByRole('heading', { name: 'Coverage' })).toBeVisible();
  32 |   await expect(page.getByRole('heading', { name: 'Family info' })).toBeVisible();
  33 |
  34 |   await expect(page.getByRole('heading', { name: 'Costs' })).toBeVisible();
  35 |   await expect(page.getByRole('heading', { name: 'Policy document(s)' })).toBeVisible();
  36 |   await expect(page.getByRole('heading', { name: 'Benefit limits' })).toBeVisible();
  37 |   await expect(page.getByRole('heading', { name: 'Limitations and exclusions' })).toBeVisible();
  38 |
  39 |   // --- User Name ---
  40 |   await expect(page.getByText('Andres Fatima').nth(1)).toBeVisible();
  41 |   // --- Effective Date ---
  42 |   await expect(page.getByText('Effective 01/01/2025')).toBeVisible();
  43 |
  44 |   // --- Buttons ---
  45 |   await expect(page.getByRole('button', { name: 'File new claim' })).toBeVisible();
  46 |   await expect(page.getByRole('button', { name: 'Condition lookup' })).toBeVisible();
  47 |
  48 |   // --- Coverage values ---
  49 |   await expect(page.getByText('$200')).toBeVisible();
  50 |   await expect(page.getByText('$500')).toBeVisible();
  51 |   await expect(page.getByText('$1,000')).toBeVisible();
  52 |
  53 |   // --- Policy Document (Coverage Packet PDF) ---
  54 |   await expect(page.getByText('Coverage packet')).toBeVisible();
  55 |
  56 |   // --- Family Info ---
  57 |   await expect(page.getByText('Myself')).toBeVisible();
  58 |   await expect(page.getByText('Covered', { exact: true })).toBeVisible();
  59 |   await expect(page.getByRole('alert').filter({ hasText: 'Andres Fatima' })).toBeVisible();
  60 |
  61 |   // --- Footer Text ---
  62 |   await expect(page.getByText(/Â©2025 Ansel Health, Inc. All Rights Reserved./, { exact: true })).toBeVisible();
  63 |
  64 |   // --- Benefit Limits Section ---
  65 |   await expect(page.getByText('Benefit limits')).toBeVisible();
  66 |   await expect(page.locator('span').filter({ hasText: 'Moderate' })).toBeVisible();
  67 |   await expect(page.locator('span').filter({ hasText: 'Catastrophic' })).toBeVisible();
  68 |
  69 |   // --- Limitations and Exclusions Section ---
  70 |   await expect(page.getByText('Limitations and exclusions')).toBeVisible();
  71 |   await expect(page.getByText('Exclusions', { exact: true })).toBeVisible();
  72 |   await expect(page.getByText('Waiting periods', { exact: true })).toBeVisible();
  73 |   await expect(page.getByText('Renewability, cancellation, & termination', { exact: true })).toBeVisible();
  74 |
  75 |   // --- Call to Support ---
  76 |   //await expect(page.getByText('(888) 300-5382', { exact: true })).toBeVisible();
  77 |
  78 |   // --- Check a Button Background Color (optional) ---
  79 |   const newClaimBtn = page.getByRole('button', { name: 'File new claim' });
  80 |   const backgroundColor = await newClaimBtn.evaluate((el) => {
  81 |     return window.getComputedStyle(el).backgroundColor;
  82 |   });
  83 |   console.log('File New Claim Button color:', backgroundColor);
  84 |   // You can validate color if needed, e.g.
  85 |   // expect(backgroundColor).toBe('rgb(33, 133, 208)');
  86 | }); 
  87 |
  88 |
```