# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: YouTube search for "Playwright by testers"
- Location: /Users/pejin/Documents/Playwright QA/tests/test-2.spec.ts:14:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toHaveTitle(expected)

Locator: locator(':root')
Expected string: "Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial"
Received string: "Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial - YouTube"
Call log:
  - expect.toHaveTitle with timeout 5000ms
  - waiting for locator(':root')
    9 × locator resolved to <html lang="en" refresh="" typography="" system-icons="" darker-dark-theme="" typography-spacing="" darker-dark-theme-deprecate="">…</html>
      - unexpected value "Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial - YouTube"

    at /Users/pejin/Documents/Playwright QA/tests/test-2.spec.ts:90:20
```

# Test source

```ts
   1 | /* import { test, expect} from '@playwright/test';
   2 | test ( 'testing', async ({ page})=>{
   3 |     await page.goto('https://www.youtube.com/');
   4 |    await page.getByRole('button', { name: 'Reject the use of cookies and' }).click();
   5 |    await page.getByRole('combobox', { name: 'Search' }).fill('playwright by testers');
   6 |    await page.waitForTimeout(500);
   7 |    await page.getByRole('combobox', { name: 'Search' }).press('Enter');
   8 |    await page.getByRole('link', { name: 'Playwright by Testers Talk☑️' }).click();
   9 | });
   10 |  */
   11 |
   12 | import { test, expect } from '@playwright/test';
   13 |
   14 | test('YouTube search for "Playwright by testers"', async ({ page }) => {
   15 |   await page.goto('https://www.youtube.com/');
   16 |
   17 |   // Dismiss cookie banner if present
   18 |   const rejectCookies = page.getByRole('button', { name: /Reject the use of cookies/i });
   19 |   if (await rejectCookies.isVisible()) {
   20 |     await rejectCookies.click();
   21 |   }
   22 |
   23 |   // Search input
   24 |   /* const searchInput = page.getByRole('combobox', { name: /Search/i });
   25 |   await searchInput.waitFor({ state: 'visible' });
   26 |   await searchInput.fill('playwright by testers');
   27 |   await page.waitForTimeout(500); */
   28 |   // 🔍 Click the Search button instead of pressing Enter
   29 |   /* const searchButton = page.getByRole('button', { name: /Search/i });
   30 |   await searchButton.click(); */
   31 |   //await searchInput.press('Enter');
   32 |   
   33 |   await page.getByPlaceholder('Search').fill('playwright by testers');
   34 |   await page.waitForTimeout(500);
   35 |
   36 |   const mySearch = page.getByPlaceholder('Search', { exact: true}).first()
   37 |   await expect(mySearch).toBeVisible();
   38 |   console.log('✅ It is visible!');
   39 |
   40 |   await expect(mySearch).toBeEditable();
   41 |   console.log('✅ It is editable!');
   42 |
   43 |   await expect(mySearch).toBeEnabled();
   44 |   console.log('✅ It is enabled!');
   45 |
   46 |   await expect(mySearch).toHaveAttribute('placeholder', 'Search');
   47 |   console.log('✅ It has "Search" placeholder!');
   48 |   await expect(mySearch).toHaveValue('playwright by testers');
   49 |   console.log('✅ It has "playwright by testers" value!');
   50 |   await expect(mySearch).not.toBeEmpty();
   51 |   console.log('✅ It is not empty!');
   52 |  
   53 |     await page.getByPlaceholder('Search').press('Enter');
   54 |     
   55 |
   56 |
   57 |   const videoLink = page.getByRole('link', { name: /Playwright by Testers Talk/i });
   58 |   await page.waitForTimeout(1000);
   59 |   await videoLink.click(); 
   60 |
   61 |   //await expect(page).toHaveURL(/watch/);
   62 |   //await expect(page.getByRole('heading', { name: 'Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial', exact: true }).locator('yt-formatted-string')).toContainText('Playwright');
   63 |   //await expect(page).toHaveTitle('Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial');
   64 |   await page.waitForTimeout(1000);
   65 |   /* const signIn = page.getByRole('link', { name: 'Sign in' });
   66 |   await signIn.click(); */
   67 |   await page.getByText('Open panel').first().click();
   68 |   await page.waitForTimeout(2000);
   69 |  
   70 |   
   71 |   /* const title = page.locator('#title yt-formatted-string').first();
   72 | await expect(title).toHaveText(/Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial/i, { timeout: 10000 });
   73 | console.log('🎬 Title:', (await title.textContent())?.trim());
   74 |   await expect(page).toHaveTitle('Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial'); */
   75 |   
   76 | // Grab the first yt-formatted-string inside #title
   77 | const title = page.locator('#title yt-formatted-string').first();
   78 |
   79 | // Wait until the title contains the expected text (case-insensitive match)
   80 | await expect(title).toHaveText(
   81 |   /Playwright Tutorial Full Course 2024 \| Playwright Testing Tutorial/i,
   82 |   { timeout: 10000 }
   83 | );
   84 |
   85 | // Log the title to the console
   86 | const text = (await title.textContent())?.trim();
   87 | console.log('🎬 Title:', text);
   88 |
   89 | // Assert that the page title (in browser tab) is exactly what we expect
>  90 | await expect(page).toHaveTitle('Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial');
      |                    ^ Error: Timed out 5000ms waiting for expect(locator).toHaveTitle(expected)
   91 |
   92 | console.log('✅ Title became visible');
   93 | console.log('✅ Video title is visible!');
   94 |
   95 |   await  page.goto('https://github.com/');
   96 |   await page.getByRole('link', { name: 'Sign in' }).click();
   97 |   await page.waitForTimeout(2000);
   98 |   await page.getByLabel('Homepage', { exact: true}).click();
   99 |   await page.getByText('Learn more').first().click();
  100 |   //await page.getByRole('link', { name: 'Sign in' }).click();
  101 |   await page.getByText('Sign up').first().click();
  102 |   
  103 |   console.log('✅ Test passed');
  104 | });
```