# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Shopping flow with fresh start each time
- Location: /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:3:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('link', { name: /^CS-/ })

    at /Users/pejin/Documents/Playwright QA/tests/test-38.spec.ts:18:16
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Shopping flow with fresh start each time', async ({ page, context }) => {
   4 |   // 1. Login to Salesforce
   5 |   await page.goto('https://brella--qa.sandbox.lightning.force.com/lightning/r/Contract/800QL00000JP9MvYAL/view');
   6 |   await page.getByRole('textbox', { name: 'Username' }).fill('qa@joinansel.com.qa');
   7 |   await page.getByRole('textbox', { name: 'Password' }).fill('q8xPmBoudN1W');
   8 |   await page.getByRole('button', { name: 'Log In to Sandbox' }).click();
   9 |   console.log('üß≠ Logged into Salesforce');
   10 |
   11 |   await page.getByRole('tab', { name: 'Related' }).click();
   12 |   console.log('üìÇ Opened Related tab');
   13 |
   14 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 30);
   15 |
   16 |   const csLink = page.getByRole('link', { name: /^CS-/ });
   17 |   await page.waitForTimeout(3000);
>  18 |   await csLink.click();
      |                ^ Error: locator.click: Test timeout of 30000ms exceeded.
   19 |   console.log('üîó Clicked CS- link');
   20 |
   21 |   await page.waitForTimeout(1000);
   22 |   await page.getByRole('tab', { name: 'Related' }).click();
   23 |
   24 |   await page.getByRole('link', { name: 'Prospectives (6+)' }).click();
   25 |   await page.getByRole('heading', { name: 'Prospectives' }).click();
   26 |
   27 |   const firstNameLink = page.locator('a.slds-truncate >> visible=true').first();
   28 |   await firstNameLink.click({ force: true });
   29 |   console.log('‚úÖ Clicked first name in list');
   30 |
   31 |   await page.getByRole('tab', { name: 'Details' }).click();
   32 |   for (let i = 0; i < 10; i++) await page.mouse.wheel(0, 100);
   33 |
   34 |   // Extract SSN
   35 |   const ssnElement = page.locator('lightning-formatted-text').filter({ hasText: /^\d{3}-\d{2}-\d{4}$/ }).first();
   36 |   const ssn = await ssnElement.innerText();
   37 |   console.log(`üîê SSN: ${ssn}`);
   38 |
   39 |   // Extract and format DOB
   40 |   const dobElement = page.locator('lightning-formatted-text')
   41 |     .locator('xpath=../../..')
   42 |     .filter({ hasText: 'Date of Birth' })
   43 |     .locator('lightning-formatted-text');
   44 |
   45 |   const dobRaw = await dobElement.innerText();
   46 |   let [month, day, year] = dobRaw.split('/');
   47 |   month = month.padStart(2, '0');
   48 |   day = day.padStart(2, '0');
   49 |   const dob = `${month}/${day}/${year}`;
   50 |   console.log(`üéÇ DOB: ${dob}`);
   51 |
   52 |   // Get the shopping link
   53 |   await page.getByRole('button', { name: 'Get The Link' }).click();
   54 |   console.log('üîó Clicked "Get The Link"');
   55 |
   56 |   const validTextarea = page.locator('textarea').filter({ hasText: /^https:\/\/.+/ }).first();
   57 |   await expect(validTextarea).toBeVisible({ timeout: 10000 });
   58 |   const link = await validTextarea.inputValue();
   59 |   console.log(`üìé Extracted Link: ${link}`);
   60 |
   61 |   // 2. Open the link in a fresh context
   62 |   const newPage = await context.newPage();
   63 |   await newPage.goto('about:blank'); // required so we can clear
   64 |   await newPage.context().clearCookies();
   65 |   await newPage.evaluate(() => localStorage.clear());
   66 |   await newPage.goto(link, { waitUntil: 'domcontentloaded' });
   67 |   console.log('üÜï Opened fresh standalone shopping link');
   68 |
   69 |   // 3. Verification
   70 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   71 |   console.log('üìÑ On Verification page');
   72 |
   73 |   await newPage.getByRole('textbox', { name: 'MM/DD/YYYY' }).fill(dob);
   74 |   await newPage.getByRole('textbox', { name: 'XXX-XX-XXXX' }).fill(ssn);
   75 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   76 |   console.log('‚úÖ Verification submitted');
   77 |
   78 |   // 4. Additional questions
   79 |   await newPage.getByRole('radio', { name: 'No' }).click();
   80 |   await newPage.getByText('I\'m not a parent').click();
   81 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   82 |   console.log('üë™ Household questions answered');
   83 |
   84 |   // 5. Progress through steps
   85 |   for (let i = 1; i <= 8; i++) {
   86 |     await newPage.getByRole('button', { name: 'Next step' }).click();
   87 |     console.log(`‚û°Ô∏è Page ${i + 2} complete`);
   88 |   }
   89 |
   90 |   await newPage.getByRole('link', { name: 'Skip this' }).click();
   91 |   console.log('üïµÔ∏è‚Äç‚ôÇÔ∏è Skipped optional promo');
   92 |
   93 |   await newPage.getByRole('button', { name: 'Next step' }).click();
   94 |   await newPage.waitForTimeout(1000);
   95 |   await newPage.getByRole('listbox').filter({ hasText: 'FemaleMale' }).click();
   96 |   await newPage.getByRole('textbox', { name: '(XXX) XXX-XXXX' }).fill('1234567890');
   97 |   await newPage.getByRole('listbox').filter({ hasText: 'MobileStandard' }).click();
   98 |
   99 |   await newPage.locator('input[name="SET_STREET_ADDRESS"]').fill('123 Main St');
  100 |   await newPage.locator('input[name="SET_ZIP_CODE"]').fill('12345');
  101 |   await newPage.locator('input[name="SET_CITY"]').fill('Sample City');
  102 |
  103 |   await newPage.getByRole('button', { name: 'Next step' }).click();
  104 |   console.log('üì¨ Contact info filled');
  105 |
  106 |   await newPage.locator('input[name="password"]').fill('Demo123456');
  107 |   await newPage.locator('input[name="confirmPassword"]').fill('Demo123456');
  108 |   await newPage.evaluate(() => {
  109 |     const checkbox = document.querySelector('input[name="agreeToTerms"]');
  110 |     if (checkbox) checkbox.removeAttribute('readonly');
  111 |     (checkbox as HTMLInputElement).click();
  112 |   });
  113 |
  114 |   console.log('üîê Final step reached and password set.');
  115 | });
```