# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify all fields and buttons are present in Contacts list view
- Location: /Users/pejin/Documents/Playwright QA/tests/test-33.spec.ts:3:5

# Error details

```
Error: expect.toBeVisible: Error: strict mode violation: getByText('Contact Owner') resolved to 21 elements:
    1) <div lwc-5hhgkpas038="" class="slds-popover__body">Contact Owner Alias isn't searchable. Use filters…</div> aka getByText('Contact Owner Alias isn\'t')
    2) <span class="slds-truncate" title="Contact Owner Alias" data-aura-rendered-by="129:744;a">Contact Owner Alias</span> aka getByText('Contact Owner Alias', { exact: true })
    3) <span class="slds-assistive-text" data-aura-rendered-by="1140:0">Show Contact Owner Alias Column Actions</span> aka getByText('Show Contact Owner Alias')
    4) <span class="slds-assistive-text" data-aura-rendered-by="1364:0">Locked Contact Owner Alias: Item </span> aka locator('td:nth-child(8) > .slds-grid > .triggerContainer > .slds-button > .slds-assistive-text').first()
    5) <span class="slds-assistive-text" data-aura-rendered-by="1364:0">Locked Contact Owner Alias: Item </span> aka locator('tr:nth-child(2) > td:nth-child(8) > .slds-grid > .triggerContainer > .slds-button > .slds-assistive-text')
    6) <span class="slds-assistive-text" data-aura-rendered-by="1364:0">Locked Contact Owner Alias: Item </span> aka locator('tr:nth-child(3) > td:nth-child(8) > .slds-grid > .triggerContainer > .slds-button > .slds-assistive-text')
    7) <span class="slds-assistive-text" data-aura-rendered-by="1364:0">Locked Contact Owner Alias: Item </span> aka locator('tr:nth-child(4) > td:nth-child(8) > .slds-grid > .triggerContainer > .slds-button > .slds-assistive-text')
    8) <span class="slds-assistive-text" data-aura-rendered-by="1364:0">Locked Contact Owner Alias: Item </span> aka locator('tr:nth-child(5) > td:nth-child(8) > .slds-grid > .triggerContainer > .slds-button > .slds-assistive-text')
    9) <span class="slds-assistive-text" data-aura-rendered-by="1364:0">Locked Contact Owner Alias: Item </span> aka locator('tr:nth-child(6) > td:nth-child(8) > .slds-grid > .triggerContainer > .slds-button > .slds-assistive-text')
    10) <span class="slds-assistive-text" data-aura-rendered-by="1364:0">Locked Contact Owner Alias: Item </span> aka locator('tr:nth-child(7) > td:nth-child(8) > .slds-grid > .triggerContainer > .slds-button > .slds-assistive-text')
    ...

Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByText('Contact Owner')

    at /Users/pejin/Documents/Playwright QA/tests/test-33.spec.ts:64:49
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Verify all fields and buttons are present in Contacts list view', async ({ page }) => {
   4 |   // Go to your Salesforce Contacts page
   5 |   await page.goto('https://ansel2-dev-ed.develop.lightning.force.com/lightning/o/Contact/list?filterName=00BWU00000QUsgp2AD'); // <-- Replace with actual URL
   6 |
   7 |   console.log('Filling in username...');
   8 |   await page.getByRole('textbox', { name: 'Username' }).fill('pejinigor@gmail.com');
   9 |   await page.getByRole('textbox', { name: 'Password' }).fill('Test123456');
   10 |
   11 |   console.log('Clicking Log In...');
   12 |   await page.getByRole('button', { name: 'Log In' }).click();
   13 |   // Wait for the page to load
   14 |  await page.waitForTimeout(1500);
   15 |   // 🔍 Table column headers
   16 |   await expect(page.getByRole('button', { name: 'Sort Name' })).toBeVisible();
   17 |   await expect(page.getByRole('button', { name: 'Sort Account Name' })).toBeVisible();
   18 |   await expect(page.getByRole('button', { name: 'Sort Title' })).toBeVisible();
   19 |   await expect(page.getByRole('button', { name: 'Sort Phone' })).toBeVisible();
   20 |   await expect(page.getByRole('button', { name: 'Sort Email' })).toBeVisible();
   21 |   await expect(page.getByRole('button', { name: 'Sort Contact Owner Alias' })).toBeVisible();
   22 |   await expect(page.getByRole('button', { name: 'Refresh Refresh' })).toBeVisible();
   23 |   await expect(page.getByRole('button', { name: 'Edit List' })).toBeVisible();
   24 |  
   25 |
   26 |
   27 |   // 🔘 Top action buttons
   28 |   await expect(page.getByRole('button', { name: 'New' })).toBeVisible();
   29 |   await expect(page.getByRole('button', { name: 'Intelligence View' })).toBeVisible();
   30 |   await expect(page.getByRole('button', { name: 'Import' })).toBeVisible();
   31 |   await expect(page.getByRole('button', { name: 'Add to Campaign' })).toBeVisible();
   32 |   await expect(page.getByRole('button', { name: 'Send List Email' })).toBeVisible();
   33 |
   34 |   // 🔍 Search box (inside "Search this list...")
   35 |   await expect(page.getByPlaceholder('Search this list...')).toBeVisible();
   36 |
   37 |   // 🛠️ List action icons (grid, filters, etc.)
   38 |   await expect(page.locator('button[title="List View Controls"]')).toBeVisible(); // gear icon
   39 |   await expect(page.getByRole('button', { name: 'Select list display' })).toBeVisible(); // funnel/dropdown
   40 |   
   41 |
   42 |   await page.getByRole('button', { name: 'Search' }).click();
   43 |   await page.getByRole('searchbox', { name: 'Search Contacts and more' }).fill('Contacts');
   44 |   
   45 |
   46 |
   47 |   console.log('Navigating to John Bond contact record...');
   48 |   await page.getByRole('link', { name: 'John Bond' }).click();
   49 |   
   50 |
   51 |
   52 |   console.log('Navigating to John Bond contact record...');
   53 |   await page.getByRole('link', { name: 'John Bond' }).click();
   54 |
   55 |   console.log('Switching to Details tab...');
   56 |   await page.getByRole('tab', { name: 'Details' }).click();
   57 |
   58 |   
   59 |
   60 |   // Wait for stability (if needed)
   61 |   await page.waitForTimeout(1500);
   62 |
   63 |   // ✅ LEFT COLUMN FIELDS
>  64 |   await expect(page.getByText('Contact Owner')).toBeVisible();
      |                                                 ^ Error: expect.toBeVisible: Error: strict mode violation: getByText('Contact Owner') resolved to 21 elements:
   65 |   await expect(page.getByRole('link', { name: 'Igor Pejin' })).toBeVisible();
   66 |
   67 |   await expect(page.getByText('Name')).toBeVisible();
   68 |   await expect(page.getByText('Mr. John Bond')).toBeVisible();
   69 |
   70 |   await expect(page.getByText('Account Name')).toBeVisible();
   71 |   await expect(page.getByRole('link', { name: 'Grand Hotels & Resorts Ltd' })).toBeVisible();
   72 |
   73 |   await expect(page.getByText('Title')).toBeVisible();
   74 |   await expect(page.getByText('VP, Facilities')).toBeVisible();
   75 |
   76 |   await expect(page.getByText('Department')).toBeVisible();
   77 |   await expect(page.getByText('Facilities')).toBeVisible();
   78 |
   79 |   await expect(page.getByText('Birthdate')).toBeVisible();
   80 |   await expect(page.getByText('11. 01. 1961.')).toBeVisible();
   81 |
   82 |   await expect(page.getByText('Lead Source')).toBeVisible();
   83 |   await expect(page.getByText('External Referral')).toBeVisible();
   84 |
   85 |   await expect(page.getByText('Website URL')).toBeVisible();
   86 |   await expect(page.getByRole('link', { name: 'https://playwright.dev/' })).toBeVisible();
   87 |
   88 |   // ✅ RIGHT COLUMN FIELDS
   89 |   await expect(page.getByText('Phone')).toBeVisible();
   90 |   await expect(page.getByText('(312) 596-1000')).toBeVisible();
   91 |
   92 |   await expect(page.getByText('Mobile')).toBeVisible();
   93 |   await expect(page.getByText('(312) 596-1563')).toBeVisible();
   94 |
   95 |   await expect(page.getByText('Fax')).toBeVisible();
   96 |   await expect(page.getByText('(312) 596-1500')).toBeVisible();
   97 |
   98 |   await expect(page.getByText('Email')).toBeVisible();
   99 |   await expect(page.getByText('bond_john@grandhotels.com')).toBeVisible();
  100 |
  101 |   await expect(page.getByText('Mailing Address')).toBeVisible();
  102 |   await expect(page.getByText('2334 N. Michigan Avenue')).toBeVisible(); // partial match might be needed
  103 |
  104 |   await expect(page.getByText('Languages')).toBeVisible();
  105 |   await expect(page.getByText('English')).toBeVisible();
  106 |
  107 |   await expect(page.getByText('Level')).toBeVisible();
  108 |   await expect(page.getByText('Primary')).toBeVisible();
  109 |
  110 |   await expect(page.getByText('Created By')).toBeVisible();
  111 |   await expect(page.getByText('24. 03. 2025.')).toBeVisible();
  112 |
  113 |   await expect(page.getByText('Last Modified By')).toBeVisible();
  114 |   await expect(page.getByText('28. 03. 2025.')).toBeVisible();
  115 |
  116 |   console.log('✅ All contact detail fields are present!');
  117 |
  118 |
  119 | });
```