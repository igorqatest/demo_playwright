# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: YouTube search for "Playwright by testers"
- Location: /Users/pejin/Documents/Playwright QA/tests/test-2.spec.ts:14:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toHaveText(expected)

Locator: locator('a.yt-simple-endpoint').filter({ hasText: 'Playwright by Testers Talk' }).first()
Expected string: "Playwright by Testers Talk"
Received string: "Playwright by Testers Talk‚òëÔ∏è"
Call log:
  - expect.toHaveText with timeout 5000ms
  - waiting for locator('a.yt-simple-endpoint').filter({ hasText: 'Playwright by Testers Talk' }).first()
    8 √ó locator resolved to <a dir="auto" spellcheck="false" href="/playlist?list=PLUeDIlio4THEgPRVJRqZRS8uw8hhVNQCM" class="yt-simple-endpoint style-scope yt-formatted-string">Playwright by Testers Talk‚òëÔ∏è</a>
      - unexpected value "Playwright by Testers Talk‚òëÔ∏è"

    at /Users/pejin/Documents/Playwright QA/tests/test-2.spec.ts:71:30
```

# Test source

```ts
   1 | /* import { test, expect} from '@playwright/test';
   2 | test ( 'testing', async ({ page})=>{
   3 |     await page.goto('https://www.youtube.com/');
   4 |    await page.getByRole('button', { name: 'Reject the use of cookies and' }).click();
   5 |    await page.getByRole('combobox', { name: 'Search' }).fill('playwright by testers');
   6 |    await page.waitForTimeout(500);
   7 |    await page.getByRole('combobox', { name: 'Search' }).press('Enter');
   8 |    await page.getByRole('link', { name: 'Playwright by Testers Talk‚òëÔ∏è' }).click();
   9 | });
  10 |  */
  11 |
  12 | import { test, expect } from '@playwright/test';
  13 |
  14 | test('YouTube search for "Playwright by testers"', async ({ page }) => {
  15 |   await page.goto('https://www.youtube.com/');
  16 |
  17 |   // Dismiss cookie banner if present
  18 |   const rejectCookies = page.getByRole('button', { name: /Reject the use of cookies/i });
  19 |   if (await rejectCookies.isVisible()) {
  20 |     await rejectCookies.click();
  21 |   }
  22 |
  23 |   // Search input
  24 |   /* const searchInput = page.getByRole('combobox', { name: /Search/i });
  25 |   await searchInput.waitFor({ state: 'visible' });
  26 |   await searchInput.fill('playwright by testers');
  27 |   await page.waitForTimeout(500); */
  28 |   // üîç Click the Search button instead of pressing Enter
  29 |   /* const searchButton = page.getByRole('button', { name: /Search/i });
  30 |   await searchButton.click(); */
  31 |   //await searchInput.press('Enter');
  32 |   
  33 |   await page.getByPlaceholder('Search').fill('playwright by testers');
  34 |   await page.waitForTimeout(500);
  35 |
  36 |   const mySearch = page.getByPlaceholder('Search', { exact: true}).first()
  37 |   await expect(mySearch).toBeVisible();
  38 |   console.log('‚úÖ It is visible!');
  39 |
  40 |   await expect(mySearch).toBeEditable();
  41 |   console.log('‚úÖ It is editable!');
  42 |
  43 |   await expect(mySearch).toBeEnabled();
  44 |   console.log('‚úÖ It is enabled!');
  45 |
  46 |   await expect(mySearch).toHaveAttribute('placeholder', 'Search');
  47 |   console.log('‚úÖ It has "Search" placeholder!');
  48 |   await expect(mySearch).toHaveValue('playwright by testers');
  49 |   console.log('‚úÖ It has "playwright by testers" value!');
  50 |   await expect(mySearch).not.toBeEmpty();
  51 |   console.log('‚úÖ It is not empty!');
  52 |  
  53 |     await page.getByPlaceholder('Search').press('Enter');
  54 |     
  55 |
  56 |
  57 |   const videoLink = page.getByRole('link', { name: /Playwright by Testers Talk/i });
  58 |   await page.waitForTimeout(1000);
  59 |   await videoLink.click(); 
  60 |
  61 |   //await expect(page).toHaveURL(/watch/);
  62 |   //await expect(page.getByRole('heading', { name: 'Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial', exact: true }).locator('yt-formatted-string')).toContainText('Playwright');
  63 |   //await expect(page).toHaveTitle('Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial');
  64 |   await page.waitForTimeout(1000);
  65 |
  66 |   const playlistLink = page.locator('a.yt-simple-endpoint', {
  67 |     hasText: 'Playwright by Testers Talk',
  68 |   }).first();
  69 |   
  70 |   await expect(playlistLink).toBeVisible();
> 71 |   await expect(playlistLink).toHaveText('Playwright by Testers Talk');
     |                              ^ Error: Timed out 5000ms waiting for expect(locator).toHaveText(expected)
  72 |
  73 |   /* const signIn = page.getByRole('link', { name: 'Sign in' });
  74 |   await signIn.click(); */
  75 |   await page.getByText('Open panel').first().click();
  76 |   await page.waitForTimeout(2000);
  77 |  
  78 |   
  79 |   const title = page.locator('#title yt-formatted-string').first();
  80 | await expect(title).toHaveText(/Playwright Tutorial Full Course 2024 | Playwright Testing Tutorial/i, { timeout: 10000 });
  81 | console.log('üé¨ Title:', (await title.textContent())?.trim());
  82 |
  83 | console.log('‚úÖ Title became visible');
  84 | console.log('‚úÖ Video title is visible!');
  85 |
  86 |   await  page.goto('https://github.com/');
  87 |   await page.getByRole('link', { name: 'Sign in' }).click();
  88 |   await page.waitForTimeout(2000);
  89 |   await page.getByLabel('Homepage', { exact: true}).click();
  90 |   await page.getByText('Learn more').first().click();
  91 |   //await page.getByRole('link', { name: 'Sign in' }).click();
  92 |   await page.getByText('Sign up').first().click();
  93 |   
  94 |   console.log('‚úÖ Test passed');
  95 | });
```